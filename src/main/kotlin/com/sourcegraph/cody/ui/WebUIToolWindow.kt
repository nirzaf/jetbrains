package com.sourcegraph.cody.ui

import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.components.Service
import com.intellij.openapi.components.service
import com.intellij.openapi.diagnostic.Logger
import com.intellij.openapi.project.DumbAware
import com.intellij.openapi.project.Project
import com.intellij.openapi.wm.ToolWindow
import com.intellij.openapi.wm.ToolWindowFactory
import com.intellij.ui.content.ContentFactory
import com.intellij.ui.jcef.JBCefBrowserBase
import com.intellij.ui.jcef.JBCefBrowserBuilder
import com.intellij.ui.jcef.JBCefJSQuery
import com.intellij.util.io.isAncestor
import com.sourcegraph.cody.agent.CodyAgent
import com.sourcegraph.cody.agent.CodyAgentService
import com.sourcegraph.cody.agent.WebviewReceiveMessageStringEncodedParams
import com.sourcegraph.cody.agent.protocol.WebviewCreateWebviewPanelParams
import com.sourcegraph.cody.chat.actions.ExportChatsAction.Companion.gson
import com.sourcegraph.cody.sidebar.WebTheme
import com.sourcegraph.cody.sidebar.WebThemeController
import java.io.IOException
import java.net.URI
import java.nio.ByteBuffer
import java.nio.channels.AsynchronousFileChannel
import java.nio.channels.CompletionHandler
import java.nio.file.StandardOpenOption
import kotlin.io.path.Path
import kotlin.math.min
import org.cef.browser.CefBrowser
import org.cef.browser.CefFrame
import org.cef.callback.CefAuthCallback
import org.cef.callback.CefCallback
import org.cef.handler.*
import org.cef.misc.BoolRef
import org.cef.misc.IntRef
import org.cef.misc.StringRef
import org.cef.network.CefCookie
import org.cef.network.CefRequest
import org.cef.network.CefResponse
import org.cef.network.CefURLRequest
import javax.swing.JComponent

// Responsibilities:
// - Creates, tracks all WebUI instances.
// - Pushes theme updates into WebUI instances.
// - Routes messages from host to WebUI instances.
@Service(Service.Level.PROJECT)
class WebUIService(private val project: Project) {
  companion object {
    // TODO: If not disposed, etc.
    @JvmStatic
    fun getInstance(project: Project): WebUIService = project.service<WebUIService>()
  }

  private var proxies: MutableMap<String, WebUIProxy> = mutableMapOf()

  private var themeController =
    WebThemeController().apply { setThemeChangeListener { updateTheme(it) } }

  private fun updateTheme(theme: WebTheme) {
    proxies.values.forEach { it.updateTheme(theme) }
  }

  fun postMessageHostToWebview(handle: String, stringEncodedJsonMessage: String) {
    val proxy = this.proxies[handle] ?: return
    proxy.postMessageHostToWebview(stringEncodedJsonMessage)
  }

  fun createWebviewPanel(params: WebviewCreateWebviewPanelParams) {
    val handle = params.handle
    var view: WebviewViewDelegate? = null
    val delegate = object : WebUIHost {
      override fun postMessageWebviewToHost(stringEncodedJsonMessage: String) {
        CodyAgentService.withAgent(project) {
          it.server.webviewReceiveMessageStringEncoded(
            WebviewReceiveMessageStringEncodedParams(
              handle,
              stringEncodedJsonMessage
            )
          )
        }
      }
      override fun setTitle(value: String) {
        view?.setTitle(value)
      }
    }
    val proxy = WebUIProxy.create(delegate)
    proxies[params.handle] = proxy

    // TODO: This should create a panel, but it creates a sidebar view.
    // TODO: Manage tearing down the view when we are done.
    view = CodyViewService.getInstance(project).createView(proxy)

    proxy.updateTheme(themeController.getTheme())
  }
}

// We make up a host name and serve the static resources into the webview apparently from this host.
val PSEUDO_HOST = "file+.sourcegraphstatic.com"
val PSEUDO_HOST_URL_PREFIX = "https://$PSEUDO_HOST/"
// VSCode does this differently and uses a cross-origin request for subresources.
// This requires rewriting relative URLs, so for now stick everything on the HTTPS + pseudo host
// origin.
val MAIN_RESOURCE_URL =
    "${PSEUDO_HOST_URL_PREFIX}webviews/index.html" // "cody:///webviews/index.html"

// TODO:
// - Hook up webview/didDispose, etc.

interface WebUIHost {
  fun setTitle(value: String)
  fun postMessageWebviewToHost(stringEncodedJsonMessage: String)
}

class WebUIProxy(private val host: WebUIHost, private val browser: JBCefBrowserBase) {
  companion object {
    fun create(host: WebUIHost): WebUIProxy {
      val browser =
        JBCefBrowserBuilder()
          .apply {
            setOffScreenRendering(false)
            // TODO: Make this conditional on running in a debug configuration.
            setEnableOpenDevToolsMenuItem(true)
          }
          .build()
      val proxy = WebUIProxy(host, browser)

      val viewToHost =
        JBCefJSQuery.create(browser as JBCefBrowserBase).apply {
          addHandler { query: String ->
            println("webview -> host: $query")
            // TODO: Agent protocol needs a way to inject onDidReceiveMessage events.
            // Thru to AgentWebViewPanel.receiveMessage

            // TODO: Move this query handling to the proxy.
            if (query == "{\"what\":\"DOMContentLoaded\"}") {
              proxy.onDOMContentLoaded()
            }

            val postMessagePrefix = "{\"what\":\"postMessage\","
            if (query.startsWith(postMessagePrefix)) {
              val message = query.substring(postMessagePrefix.length, query.length - 1)
              println("host <- webview: $message")
              proxy.postMessageWebviewToHost(message)
            }

            // TODO: Remove these fake messages.
            // Fake sending messages to the webview to boot it up.
            if (query.contains("initialized")) {
              ApplicationManager.getApplication().executeOnPooledThread {
                messages.forEach {
                  val code =
                    """
              (() => {
                let e = new CustomEvent('message');
                e.data = $it;
                window.dispatchEvent(e);
              })()
              """
                      .trimIndent()
                  println("sending message to webview: $code")
                  browser.cefBrowser.mainFrame.executeJavaScript(code, "cody://postMessage", 0)
                }
              }
            }

            JBCefJSQuery.Response(null)
          }
        }
      // TODO: We could add a second script tag and run when the body element is created.
      val apiScript =
        """
      globalThis.acquireVsCodeApi = (function() {
          let acquired = false;
          let state = undefined;

          return () => {
              if (acquired && !false) {
                  throw new Error('An instance of the VS Code API has already been acquired');
              }
              acquired = true;
              return Object.freeze({
                  postMessage: function(message, transfer) {
                    console.assert(!transfer);
                    ${viewToHost.inject("JSON.stringify({what: 'postMessage', value: message})")}
                  },
                  setState: function(newState) {
                      state = newState;
                      // TODO: Route this to wherever VSCode sinks do-update-state.
                      // doPostMessage('do-update-state', JSON.stringify(newState));
                      console.log(`do-update-state: ${'$'}{JSON.stringify(newState)}`);
                      return newState;
                  },
                  getState: function() {
                      return state;
                  }
              });
          };
      })();
      delete window.parent;
      delete window.top;
      delete window.frameElement;

      document.addEventListener('DOMContentLoaded', () => {
        ${viewToHost.inject("JSON.stringify({what:'DOMContentLoaded'})")}
      });
    """
          .trimIndent()
      browser.jbCefClient.addRequestHandler(ExtensionRequestHandler(apiScript), browser.cefBrowser)
      // TODO: The extension sets the HTML property, causing this navigation. Move that there.
      browser.loadURL(MAIN_RESOURCE_URL)
      return proxy
    }
  }

  private var isDOMContentLoaded = false
  private val logger = Logger.getInstance(WebUIProxy::class.java)
  private var theme: WebTheme? = null

  private var _title: String = ""
  var title: String
    get() = _title
    set(value) {
      host.setTitle(value)
      _title = value
    }

  val component: JComponent? get() = browser.component

  fun postMessageWebviewToHost(stringEncodedJsonMessage: String) {
    host.postMessageWebviewToHost(stringEncodedJsonMessage)
  }

  fun postMessageHostToWebview(stringEncodedJsonMessage: String) {
    val code =
      """
      (() => {
        let e = new CustomEvent('message');
        e.data = ${stringEncodedJsonMessage};
        window.dispatchEvent(e);
      })()
      """
        .trimIndent()

    // TODO: Consider a better origin that this random made-up origin.
    browser.cefBrowser.mainFrame?.executeJavaScript(code, "cody://postMessage", 0)
  }

  fun onDOMContentLoaded() {
    isDOMContentLoaded = true
    theme?.let { updateTheme(it) }
  }

  fun updateTheme(theme: WebTheme) {
    this.theme = theme
    if (!this.isDOMContentLoaded) {
      logger.info("not updating WebView theme before DOMContentLoaded")
      return
    }
    val code =
        """
    (() => {
      let e = new CustomEvent('message');
      e.data = {
        type: 'ui/theme',
        agentIDE: 'JetBrains',
        cssVariables: ${gson.toJson(theme.variables)},
        isDark: ${theme.isDark}
      };
      window.dispatchEvent(e);
    })()
    """
            .trimIndent()

    browser.cefBrowser.mainFrame?.executeJavaScript(code, "cody://updateTheme", 0)
  }
}

// TODO: Rationalize this with the other Cody view service.
@Service(Service.Level.PROJECT)
class CodyViewService(val project: Project) {
  var toolWindow: ToolWindow? = null

  fun createView(proxy: WebUIProxy): WebviewViewDelegate? {
    // TODO: Handle lazily creating views when the tool window is not available yet.
    val toolWindow = this.toolWindow ?: return null
    toolWindow.isAvailable = true

    // TODO: Design question, do we want to reflect titles at the ToolWindow or at the Content level?

    val lockable = true
    // TODO: Hook up dispose, etc.
    val content = ContentFactory.SERVICE.getInstance()
      .createContent(proxy.component, proxy.title, lockable)
    this.toolWindow?.contentManager?.addContent(content)
    return object : WebviewViewDelegate {
      override fun setTitle(newTitle: String) {
        content.toolwindowTitle = newTitle
      }
      // TODO: Add icon support.
    }
  }

  companion object {
    fun getInstance(project: Project): CodyViewService {
      return project.service()
    }
  }
}

class WebUIToolWindowFactory : ToolWindowFactory, DumbAware {
  override fun createToolWindowContent(project: Project, toolWindow: ToolWindow) {
    // TODO: support this happening AFTER chats are created
    toolWindow.isAvailable = true
    // TODO: Generalize this to support multiple tool windows.
    CodyViewService.getInstance(project).toolWindow = toolWindow
  }
}

interface WebviewViewDelegate {
  fun setTitle(newTitle: String)
}

class ExtensionRequestHandler(private val apiScript: String) : CefRequestHandler {
  override fun onBeforeBrowse(
      browser: CefBrowser?,
      frame: CefFrame?,
      request: CefRequest?,
      userGesture: Boolean,
      isRedirect: Boolean
  ): Boolean {
    // TODO: Consider blocking navigations away from the extension.
    return false
  }

  override fun onOpenURLFromTab(
      browser: CefBrowser?,
      frame: CefFrame?,
      targetUrl: String?,
      userGesture: Boolean
  ): Boolean {
    // TODO: Add Telemetry
    // We don't support tabbed browsing so cancel navigation.
    return true
  }

  override fun getResourceRequestHandler(
      browser: CefBrowser?,
      frame: CefFrame?,
      request: CefRequest?,
      isNavigation: Boolean,
      isDownload: Boolean,
      requestInitiator: String?,
      disableDefaultHandling: BoolRef?
  ): CefResourceRequestHandler? {
    if (request?.url == MAIN_RESOURCE_URL ||
        request?.url?.startsWith(PSEUDO_HOST_URL_PREFIX) == true) {
      disableDefaultHandling?.set(true)
      return ExtensionResourceRequestHandler(apiScript)
    }
    disableDefaultHandling?.set(false)
    return null
  }

  override fun getAuthCredentials(
      browser: CefBrowser?,
      originUrl: String?,
      isProxy: Boolean,
      host: String?,
      port: Int,
      realm: String?,
      scheme: String?,
      callback: CefAuthCallback?
  ): Boolean {
    // We do not load web content that requires authentication.
    return false
  }

  override fun onQuotaRequest(
      browser: CefBrowser?,
      originUrl: String?,
      newSize: Long,
      callback: CefCallback?
  ): Boolean {
    // TODO: Filter to the extension origin.
    callback?.Continue()
    return true
  }

  override fun onCertificateError(
      browser: CefBrowser?,
      certError: CefLoadHandler.ErrorCode?,
      requestUrl: String?,
      callback: CefCallback?
  ): Boolean {
    // TODO: Add Telemetry here.
    return false
  }

  override fun onPluginCrashed(browser: CefBrowser?, pluginPath: String?) {
    // TODO: Add Telemetry here.
    // As we do not use plugins, we do not need to handle this.
  }

  override fun onRenderProcessTerminated(
      browser: CefBrowser?,
      status: CefRequestHandler.TerminationStatus?
  ) {
    // TODO: Add Telemetry here.
    // TODO: Logging.
    // TODO: Trigger a reload.
  }
}

class ExtensionResourceRequestHandler(private val apiScript: String) : CefResourceRequestHandler {
  override fun getCookieAccessFilter(
      browser: CefBrowser?,
      frame: CefFrame?,
      request: CefRequest?
  ): CefCookieAccessFilter {
    // TODO: Make this a single object.
    return object : CefCookieAccessFilter {
      override fun canSaveCookie(
          browser: CefBrowser?,
          frame: CefFrame?,
          request: CefRequest?,
          response: CefResponse?,
          cookie: CefCookie?
      ): Boolean {
        // We do not load web content that uses cookies, so block them all.
        return false
      }

      override fun canSendCookie(
          browser: CefBrowser?,
          frame: CefFrame?,
          request: CefRequest?,
          cookie: CefCookie?
      ): Boolean {
        // We do not load web content that uses cookies, so there are no cookies to send.
        return false
      }
    }
  }

  override fun onBeforeResourceLoad(
      browser: CefBrowser?,
      frame: CefFrame?,
      request: CefRequest?
  ): Boolean {
    return false
  }

  override fun getResourceHandler(
      browser: CefBrowser?,
      frame: CefFrame?,
      request: CefRequest?
  ): CefResourceHandler {
    return ExtensionResourceHandler(apiScript)
  }

  override fun onResourceRedirect(
      browser: CefBrowser?,
      frame: CefFrame?,
      request: CefRequest?,
      response: CefResponse?,
      newUrl: StringRef?
  ) {
    // We do not serve redirects.
    TODO("unreachable")
  }

  override fun onResourceResponse(
      browser: CefBrowser?,
      frame: CefFrame?,
      request: CefRequest?,
      response: CefResponse?
  ): Boolean {
    return false
  }

  override fun onResourceLoadComplete(
      browser: CefBrowser?,
      frame: CefFrame?,
      request: CefRequest?,
      response: CefResponse?,
      status: CefURLRequest.Status?,
      receivedContentLength: Long
  ) {
    // No-op
  }

  override fun onProtocolExecution(
      browser: CefBrowser?,
      frame: CefFrame?,
      request: CefRequest?,
      allowOsExecution: BoolRef?
  ) {
    TODO("Not yet implemented")
  }
}

class ExtensionResourceHandler(private val apiScript: String) : CefResourceHandler {
  private val logger = Logger.getInstance(ExtensionResourceHandler::class.java)
  var status = 0
  var bytesReadFromResource = 0L
  private var bytesSent = 0L
  private var bytesWaitingSend =
      ByteBuffer.allocate(100)
          .flip() // TODO: increase this, just testing we handle exceeding the buffer capacity
  // correctly
  private var contentLength = 0L
  var contentType = "text/plain"
  var readChannel: AsynchronousFileChannel? = null

  // Some response bodies need to be rewritten. Gets the rewriter, if any, for the specified request
  // path.
  private fun rewriterForRequestPath(requestPath: String): ((content: String) -> String)? =
      when {
        requestPath.endsWith(".html") -> { content: String ->
              // TODO: It is cheesy to look for <head> instead of parsing DOM content. But it is
              // effective.
              val injectedStyles = VSCODE_INJECTED_DEFAULT_STYLES
              content
                  .replace("{cspSource}", "'self' https://*.sourcegraphstatic.com")
                  .replace(
                      "<head>", "<head><script>${apiScript}</script><style>$injectedStyles</style>")
            }
        else -> null
      }

  override fun processRequest(request: CefRequest?, callback: CefCallback?): Boolean {
    val uri = URI(request?.url ?: return false)
    val requestPath = uri.path.removePrefix("/")
    ApplicationManager.getApplication().executeOnPooledThread {
      // Find the plugin resources.
      val codyDirOverride = System.getenv("CODY_DIR")
      val resourcesPath =
          if (codyDirOverride != null) {
            Path(codyDirOverride).resolve("vscode/dist")
          } else {
            CodyAgent.pluginDirectory()?.resolve("agent")
          }
      if (resourcesPath == null) {
        logger.warn(
            "Aborting WebView request for ${requestPath}, extension resource directory not found found")
        status = 500
        callback?.Continue()
        return@executeOnPooledThread
      }

      // Find the specific file being requested.
      val filePath = resourcesPath.resolve(requestPath)
      if (!resourcesPath.isAncestor(filePath)) {
        logger.warn("Aborting WebView request for ${requestPath}, attempted directory traversal?")
        status = 400
        callback?.Continue()
        return@executeOnPooledThread
      }

      // Find the particulars of that file.
      val file = filePath.toFile()
      contentLength = file.length()
      contentType =
          when {
            requestPath.endsWith(".css") -> "text/css"
            requestPath.endsWith(".html") -> "text/html"
            requestPath.endsWith(".js") -> "text/javascript"
            requestPath.endsWith(".png") -> "image/png"
            requestPath.endsWith(".svg") -> "image/svg+xml"
            requestPath.endsWith(".ttf") -> "font/ttf"
            else -> "text/plain"
          }

      val rewriter = rewriterForRequestPath(requestPath)
      if (rewriter == null) {
        // Prepare to read the file contents.
        try {
          readChannel = AsynchronousFileChannel.open(file.toPath(), StandardOpenOption.READ)
        } catch (e: IOException) {
          logger.warn(
              "Failed to open file ${file.absolutePath} to serve extension WebView request $requestPath",
              e)
          status = 404
          callback?.Continue()
          return@executeOnPooledThread
        }
      } else {
        // Read and rewrite the file contents.
        val content = file.readText()
        val rewrittenContent = rewriter(content)
        bytesWaitingSend = ByteBuffer.wrap(rewrittenContent.toByteArray())
      }

      // We're ready to synthesize headers.
      status = 200
      callback?.Continue()
    }
    return true
  }

  override fun getResponseHeaders(
      response: CefResponse?,
      responseLength: IntRef?,
      redirectUrl: StringRef?
  ) {
    response?.status = status
    response?.mimeType = contentType
    // TODO: Do we need to set content-encoding here?
    responseLength?.set(contentLength.toInt())
  }

  override fun readResponse(
      dataOut: ByteArray?,
      bytesToRead: Int,
      bytesRead: IntRef?,
      callback: CefCallback?
  ): Boolean {
    if (bytesSent >= contentLength || dataOut == null) {
      try {
        readChannel?.close()
      } catch (e: IOException) {}
      bytesRead?.set(0)
      return false
    }

    if (bytesWaitingSend.remaining() > 0) {
      val willSendNumBytes = min(bytesWaitingSend.remaining() as Int, bytesToRead)
      bytesWaitingSend.get(dataOut, 0, willSendNumBytes)
      bytesRead?.set(willSendNumBytes)
      return true
    } else {
      bytesWaitingSend.flip()
      bytesWaitingSend.limit(bytesWaitingSend.capacity())
    }

    if (readChannel == null) {
      // We need to read more, but the readChannel is closed.
      bytesRead?.set(0)
      return false
    }

    // Start an asynchronous read.
    readChannel?.read(
        bytesWaitingSend,
        bytesReadFromResource,
        null,
        object : CompletionHandler<Int, Void?> {
          override fun completed(result: Int, attachment: Void?) {
            if (result == -1) {
              try {
                readChannel?.close()
              } catch (e: IOException) {}
              readChannel = null
            } else {
              bytesReadFromResource += result
            }
            bytesWaitingSend.flip()
            callback?.Continue()
          }

          override fun failed(exc: Throwable?, attachment: Void?) {
            try {
              readChannel?.close()
            } catch (e: IOException) {}
            readChannel = null
            callback?.Continue()
          }
        })

    bytesRead?.set(0)
    return true
  }

  override fun cancel() {
    try {
      readChannel?.close()
    } catch (e: IOException) {}
    readChannel = null
  }
}

// TODO: Remove these pre-canned messages.
val messages =
    listOf(
        "{\"type\":\"transcript\",\"messages\":[],\"isMessageInProgress\":false,\"chatID\":\"Thu, 30 May 2024 09:39:23 GMT\"}",
        "{\"type\":\"enhanced-context\",\"enhancedContextStatus\":{\"groups\":[]}}",
        "{\"type\":\"clientState\",\"value\":{\"initialContext\":[{\"type\":\"file\",\"uri\":{\"${'$'}mid\":1,\"fsPath\":\"/Users/dpc/projects/cody/lib/shared/src/cody-ignore/context-filters-provider.ts\",\"external\":\"file:///Users/dpc/projects/cody/lib/shared/src/cody-ignore/context-filters-provider.ts\",\"path\":\"/Users/dpc/projects/cody/lib/shared/src/cody-ignore/context-filters-provider.ts\",\"scheme\":\"file\"},\"content\":\"\",\"source\":\"initial\",\"size\":0,\"title\":\"Current File\",\"description\":\"context-filters-provider.ts\",\"icon\":\"file\"}]}}",
        "{\"type\":\"transcript\",\"messages\":[{\"text\":\"What does the github.com/sourcegraph/cody repository use for end-to-end tests?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"What does the github.com/sourcegraph/cody repository use for end-to-end tests?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span style=\\\"white-space: pre-wrap;\\\">What does the github.com/sourcegraph/cody repository use for end-to-end tests?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},{\"model\":\"openai/gpt-4o\",\"text\":\"The `github.com/sourcegraph/cody` repository uses Cypress for end-to-end tests. Cypress is a popular JavaScript-based end-to-end testing framework that allows developers to write and run tests for web applications. You can find the Cypress tests in the `client/cypress` directory of the repository.\",\"speaker\":\"assistant\"},{\"text\":\"@github.com/sourcegraph/cody what does vscode/src/edit/utils/edit-models.ts getOverridenModelForIntent do for dotcom users doing \\\"fix\\\"?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/cody\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/cody\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/cody\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/cody\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToy\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" what does vscode/src/edit/utils/edit-models.ts getOverridenModelForIntent do for dotcom users doing \\\"fix\\\"?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/cody&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/cody&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/cody&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToy&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fcody%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/cody</a></span><span style=\\\"white-space: pre-wrap;\\\"> what does vscode/src/edit/utils/edit-models.ts getOverridenModelForIntent do for dotcom users doing \\\"fix\\\"?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},{\"model\":\"openai/gpt-4o\",\"text\":\"The `getOverridenModelForIntent` function in the `vscode/src/edit/utils/edit-models.ts` file of the `github.com/sourcegraph/cody` repository is designed to handle specific intents for users, such as the \\\"fix\\\" intent. For Sourcegraph dotcom users, this function provides a way to override the default behavior of the model based on the user's intent.\\n\\nWhen a user on Sourcegraph dotcom uses the \\\"fix\\\" intent, this function can modify or override the model's behavior to better suit the specific needs of the \\\"fix\\\" operation. This might involve adjusting the model's parameters, selecting a different model variant, or applying specific heuristics to improve the accuracy and relevance of the fixes suggested by the model.\\n\\nTo understand the exact implementation and behavior, you would need to look at the source code of the `getOverridenModelForIntent` function in the `edit-models.ts` file. This function likely contains logic to check the user's intent and apply the necessary overrides to the model.\\n\\nHere is a simplified example of what such a function might look like:\\n\\n```typescript\\nexport function getOverridenModelForIntent(intent: string, user: User): Model {\\n    let model = getDefaultModel();\\n\\n    if (user.isDotcomUser) {\\n        switch (intent) {\\n            case 'fix':\\n                model = getFixModelOverride();\\n                break;\\n            // Add other intents as needed\\n        }\\n    }\\n\\n    return model;\\n}\\n```\\n\\nIn this example, `getDefaultModel` would return the default model, and `getFixModelOverride` would return a model specifically tailored for the \\\"fix\\\" intent. The actual implementation in the repository may be more complex and involve additional logic and parameters.\",\"speaker\":\"assistant\"},{\"text\":\"@github.com/sourcegraph/cody use for end-to-end tests?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/cody\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/cody\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/cody\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/cody\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToy\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" use for end-to-end tests?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/cody&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/cody&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/cody&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToy&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fcody%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/cody</a></span><span style=\\\"white-space: pre-wrap;\\\"> use for end-to-end tests?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},{\"model\":\"openai/gpt-4o\",\"text\":\"The `github.com/sourcegraph/cody` repository uses Playwright for end-to-end tests. Playwright is a powerful end-to-end testing framework that supports multiple browsers and provides a rich API for automating web interactions.\\n\\nYou can find the Playwright tests in the `e2e` directory of the repository. This directory contains the test scripts and configurations needed to run the end-to-end tests.\\n\\nTo run the Playwright tests, you typically use commands defined in the project's `package.json` or specific scripts provided in the repository's documentation.\\n\\nFor example, you might find a script like this in `package.json`:\\n\\n```json\\n\\\"scripts\\\": {\\n  \\\"test:e2e\\\": \\\"playwright test\\\"\\n}\\n```\\n\\nRunning `npm run test:e2e` or `yarn test:e2e` would then execute the Playwright tests.\\n\\nFor more detailed information, you should refer to the specific documentation and test files within the `e2e` directory of the `github.com/sourcegraph/cody` repository.\",\"speaker\":\"assistant\"},{\"text\":\"@github.com/sourcegraph/sourcegraph What is Squirrel?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/sourcegraph\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/sourcegraph\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/sourcegraph\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/sourcegraph\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToxMA==\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" What is Squirrel?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/sourcegraph&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/sourcegraph&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/sourcegraph&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToxMA==&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fsourcegraph%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/sourcegraph</a></span><span style=\\\"white-space: pre-wrap;\\\"> What is Squirrel?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[{\"type\":\"openctx\",\"title\":\"internal/cmd/tracking-issue/testdata/issue-14166.md\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/cmd/tracking-issue/testdata/issue-14166.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L8-47\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"<!-- BEGIN WORK -->\\n<!-- BEGIN ASSIGNEE:  -->\\n@unassigned\\n\\n\\nCompleted\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166 \\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: daxmc99 -->\\n@daxmc99: __9.00d__\\n\\n\\nCompleted: __9.00d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __9.00d__\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: flying-robot -->\\n@flying-robot: __1.00d__\\n\\n\\nCompleted: __1.00d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __1.00d__\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: ryanslade -->\\n@ryanslade: __1.00d__\\n\\n\\nCompleted: __1.00d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __1.00d__\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: unknwon -->\\n@unknwon: __6.50d__\\n\\n\\nCompleted: __6.50d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __6.50d__\\n<!-- END ASSIGNEE -->\\n<!-- END WORK -->\\r\\n\",\"provider\":\"openctx\",\"size\":355,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"internal/cmd/tracking-issue/testdata/issue-13988.md\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/cmd/tracking-issue/testdata/issue-13988.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L32-60\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"<!-- BEGIN WORK -->\\n<!-- BEGIN ASSIGNEE: asdine -->\\n@asdine: __7.00d__\\n\\n\\nCompleted: __7.00d__\\n- [x] (\uD83C\uDFC1 2020-09-23) https://github.com/sourcegraph/sourcegraph/pull/14094 \\n- [x] (\uD83C\uDFC1 2020-09-30) https://github.com/sourcegraph/sourcegraph/pull/14098 \\n- [x] (\uD83C\uDFC1 2020-11-03) https://github.com/sourcegraph/sourcegraph/issues/14163  __6.50d__\\n- [x] (\uD83C\uDFC1 2023-10-03) https://github.com/sourcegraph/sourcegraph/issues/32618  __0.50d__ \uD83E\uDDF6\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: daxmc99 -->\\n@daxmc99: __1.00d__\\n\\n\\nCompleted: __1.00d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __1.00d__\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: flying-robot -->\\n@flying-robot: __3.00d__\\n\\n\\nCompleted: __3.00d__\\n- [x] (\uD83C\uDFC1 2020-10-05) https://github.com/sourcegraph/sourcegraph/pull/14370 \\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __1.00d__\\n- [x] (\uD83C\uDFC1 2022-11-01) https://github.com/sourcegraph/sourcegraph/issues/40102  __2.00d__\\n<!-- END ASSIGNEE -->\\n\\n\",\"provider\":\"openctx\",\"size\":388,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"internal/cmd/search-blitz/queries.txt\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/cmd/search-blitz/queries.txt\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L12-45\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"patterntype:regexp matt senses\\n\\n# regex_three_sameline\\npatterntype:regexp mk tim hike\\n\\n# regex_repo_scope_small\\npatterntype:regexp repo:^github\\\\.com/sgtest/slate\$ getfragment\\n\\n# regex_repo_scope_large\\npatterntype:regexp repo:^github\\\\.com/sgtest/flutter_inappwebview\$ count:800 add\\\\w+\\n\\n# regex_file_scope\\npatterntype:regexp repo:^github\\\\.com/sgtest/kubernetes\$ file:^cluster/gce/gci Installing\\n\\n# literal_small\\npatterntype:literal --exclude-task=test\\n\\n# literal_large\\npatterntype:literal lang:go -file:vendor/ count:1000 cfssl\\n\\n# literal_repo_scope\\npatterntype:literal repo:^github\\\\.com/sgtest/element\$ repeat-click\\n\\n# literal_repo_excluded_scope\\npatterntype:literal -repo:^github\\\\.com/sourcegraph/sourcegraph\$ --exclude-task=test\\n\\n# literal_file_scope\\npatterntype:literal repo:^github\\\\.com/sgtest/cockroach-gen\$ file:^pkg/ccl/importccl/read_import_csv\\\\.go p.record\\n\\n# symbol_small\\ntype:symbol IndexFormatVersion\\n\\n# diff_small\\ntype:diff repo:^github\\\\.com/sourcegraph/sourcegraph\$ author:camden before:\\\"february 1 2021\\\"\\n\\n\",\"provider\":\"openctx\",\"size\":291,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"doc/dev/background-information/grpc_tutorial.md\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/doc/dev/background-information/grpc_tutorial.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L4-11\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"As of Sourcegraph `5.3.X`, [gRPC](https://grpc.io/about/) has supplanted REST as our default mode of communication between our microservices for our internal APIs.\\n\\n<Callout type=\\\"note\\\">An \\\"internal\\\" API is one that's solely used for intra-service communication/RPCs (think `searcher` fetching an archive from `gitserver`). Internal APIs don't include things like the GraphQL API that external people can use (including our web interface).</Callout>\\n\\n## gRPC Tutorial\\n\\nThe [`internal/grpc/example`](https://github.com/sourcegraph/sourcegraph/tree/main/internal/grpc/example) package in the [sourcegraph/sourcegraph monorepo](https://github.com/sourcegraph/sourcegraph) contains a simple, runnable example of a gRPC service and client. It is a good starting point for understanding how to write a gRPC service that covers the following topics:\\n\\n- All the basic Protobuf types (e.g. primitives, enums, messages, one-ofs, etc.)\\n\",\"provider\":\"openctx\",\"size\":206,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"doc/dev/background-information/codeintel/index.md\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/doc/dev/background-information/codeintel/index.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-13\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"# Developing code navigation\\n\\nThis guide documents our approach to developing code navigation-related features in our codebase. This includes the code navigation logic included in the Sourcegraph instance as well as the [extensions](https://github.com/sourcegraph/code-intel-extensions) that provide code navigation to the web UI, browser extension, and code host integrations.\\n\\nServices:\\n\\n- [precise-code-intel-worker](https://github.com/sourcegraph/sourcegraph/blob/main/cmd/precise-code-intel-worker/README.md)\\n\\nCode navigation-specific code:\\n\\n- [lib/codeintel](https://github.com/sourcegraph/sourcegraph/tree/main/lib/codeintel)\\n- [dev/codeintel-qa](https://github.com/sourcegraph/sourcegraph/tree/main/dev/codeintel-qa)\\n- [enterprise/internal/codeintel](https://github.com/sourcegraph/sourcegraph/tree/main/enterprise/internal/codeintel)\\n\",\"provider\":\"openctx\",\"size\":175,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"internal/database/migration/stitch/stitch.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/database/migration/stitch/stitch.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-22\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package stitch\\n\\nimport (\\n\\t\\\"strings\\\"\\n\\n\\t\\\"github.com/google/go-cmp/cmp\\\"\\n\\t\\\"github.com/keegancsmith/sqlf\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/database/migration/definition\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/database/migration/shared\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/oobmigration\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\n// StitchDefinitions constructs a migration graph over time, which includes both the stitched unified\\n// migration graph as defined over multiple releases, as well as a mapping fom schema names to their\\n// root and leaf migrations so that we can later determine what portion of the graph corresponds to a\\n// particular release.\\n//\\n// Stitch is an undoing of squashing. We construct the migration graph by layering the definitions of\\n// the migrations as they're defined in each of the given revisions. Migration definitions with the\\n// same identifier will be \\\"merged\\\" by some custom rules/edge-case logic.\\n\",\"provider\":\"openctx\",\"size\":200,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"dev/buildchecker/testdata/TestRepoBranchLocker/lock.yaml\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/dev/buildchecker/testdata/TestRepoBranchLocker/lock.yaml\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L4-16\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"interactions:\\n- request:\\n    body: \\\"\\\"\\n    form: {}\\n    headers:\\n      Accept:\\n      - application/vnd.github.luke-cage-preview+json\\n      User-Agent:\\n      - go-github/v55.0.0\\n      X-Github-Api-Version:\\n      - \\\"2022-11-28\\\"\\n    url: https://api.github.com/repos/sourcegraph/sourcegraph/branches/test-buildsherrif-branch/protection\\n    method: GET\\n  response:\\n\",\"provider\":\"openctx\",\"size\":100,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/frontend/shared/shared.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/frontend/shared/shared.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L8-27\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"os\\\"\\n\\t\\\"strconv\\\"\\n\\n\\t\\\"github.com/sourcegraph/log\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/enterprise\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/auth\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/authz\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/batches\\\"\\n\\tcodeintelinit \\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/codeintel\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/codemonitors\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/codycontext\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/completions\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/compute\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/contentlibrary\\\"\\n\\tinternalcontext \\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/context\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/dotcom\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/embeddings\\\"\\n\",\"provider\":\"openctx\",\"size\":195,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"mockgen.test.yaml\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/mockgen.test.yaml\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-29\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"- filename: internal/authz/providers/gerrit/mocks_test.go\\n  sources:\\n    - path: github.com/sourcegraph/sourcegraph/internal/extsvc/gerrit\\n      interfaces:\\n        - Client\\n      prefix: Gerrit\\n- filename: internal/batches/sources/mocks_test.go\\n  sources:\\n    - path: github.com/sourcegraph/sourcegraph/internal/batches/sources\\n      interfaces:\\n        - ChangesetSource\\n        - ForkableChangesetSource\\n        - SourcerStore\\n    - path: github.com/sourcegraph/sourcegraph/internal/extsvc/bitbucketcloud\\n      interfaces:\\n        - Client\\n      prefix: BitbucketCloud\\n    - path: github.com/sourcegraph/sourcegraph/internal/extsvc/azuredevops\\n      interfaces:\\n        - Client\\n      prefix: AzureDevOps\\n    - path: github.com/sourcegraph/sourcegraph/internal/extsvc/gerrit\\n      interfaces:\\n        - Client\\n      prefix: Gerrit\\n    - path: github.com/sourcegraph/sourcegraph/internal/gitserver\\n      interfaces:\\n        - Client\\n      prefix: Gitserver\\n\",\"provider\":\"openctx\",\"size\":221,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/internal/api/BUILD.bazel\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/internal/api/BUILD.bazel\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L8-34\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"    srcs = [\\n        \\\"handler.go\\\",\\n        \\\"handler_cgo.go\\\",\\n        \\\"handler_nocgo.go\\\",\\n        \\\"search_sqlite.go\\\",\\n    ],\\n    importpath = \\\"github.com/sourcegraph/sourcegraph/cmd/symbols/internal/api\\\",\\n    tags = [TAG_PLATFORM_SEARCH],\\n    visibility = [\\\"//cmd/symbols:__subpackages__\\\"],\\n    deps = [\\n        \\\"//cmd/symbols/internal/api/observability\\\",\\n        \\\"//cmd/symbols/internal/database/store\\\",\\n        \\\"//cmd/symbols/internal/database/writer\\\",\\n        \\\"//cmd/symbols/observability\\\",\\n        \\\"//cmd/symbols/squirrel\\\",\\n        \\\"//cmd/symbols/types\\\",\\n        \\\"//internal/database\\\",\\n        \\\"//internal/grpc\\\",\\n        \\\"//internal/grpc/chunk\\\",\\n        \\\"//internal/grpc/defaults\\\",\\n        \\\"//internal/observation\\\",\\n        \\\"//internal/search\\\",\\n        \\\"//internal/search/result\\\",\\n        \\\"//internal/symbols/v1:symbols\\\",\\n        \\\"//internal/types\\\",\\n        \\\"//lib/errors\\\",\\n        \\\"@com_github_dustin_go_humanize//:go-humanize\\\",\\n        \\\"@com_github_sourcegraph_log//:log\\\",\\n\",\"provider\":\"openctx\",\"size\":218,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/breadcrumbs.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/breadcrumbs.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-40\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"os\\\"\\n\\t\\\"strings\\\"\\n\\n\\t\\\"github.com/fatih/color\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n)\\n\\n// Breadcrumb is an arbitrary annotation on a token in a file. It's used as a way to log where Squirrel\\n// has been traversing through trees and files for debugging.\\ntype Breadcrumb struct {\\n\\ttypes.RepoCommitPathRange\\n\\tlength  int\\n\\tmessage func() string\\n\\tnumber  int\\n\\tdepth   int\\n\\tfile    string\\n\\tline    int\\n}\\n\\n// Breadcrumbs is a slice of Breadcrumb.\\ntype Breadcrumbs []Breadcrumb\\n\\n// Prints breadcrumbs like this:\\n//\\n//\\tv some breadcrumb\\n//\\t  vvv other breadcrumb\\n//\\n// 78 | func f(f Foo) {\\nfunc (bs *Breadcrumbs) pretty(w *strings.Builder, readFile readFileFunc) {\\n\\t// First collect all the breadcrumbs in a map (path -> line -> breadcrumb) for easier printing.\\n\\tpathToLineToBreadcrumbs := map[types.RepoCommitPath]map[int][]Breadcrumb{}\\n\\tfor _, breadcrumb := range *bs {\\n\\t\\tpath := breadcrumb.RepoCommitPath\\n\\n\",\"provider\":\"openctx\",\"size\":235,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/local_code_intel.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/local_code_intel.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-35\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"strings\\\"\\n\\n\\tsitter \\\"github.com/smacker/go-tree-sitter\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n)\\n\\n// SymbolName is a nominal type for symbol names.\\ntype SymbolName string\\n\\n// Scope is a mapping from symbol name to symbol.\\ntype Scope = map[SymbolName]*PartialSymbol // pointer for mutability\\n\\n// PartialSymbol is the same as types.Symbol, but with the refs stored in a map to deduplicate.\\ntype PartialSymbol struct {\\n\\tName  string\\n\\tHover string\\n\\tDef   types.Range\\n\\t// Store refs as a set to avoid duplicates from some tree-sitter queries.\\n\\tRefs map[types.Range]struct{}\\n}\\n\\n// LocalCodeIntel computes the local code intel payload, which is a list of symbols.\\nfunc (s *SquirrelService) LocalCodeIntel(ctx context.Context, repoCommitPath types.RepoCommitPath) (*types.LocalCodeIntelPayload, error) {\\n\\t// Parse the file.\\n\\troot, err := s.parse(ctx, repoCommitPath)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\t// Collect scopes\\n\",\"provider\":\"openctx\",\"size\":233,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/util.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/util.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-36\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"path/filepath\\\"\\n\\t\\\"runtime\\\"\\n\\t\\\"strings\\\"\\n\\t\\\"testing\\\"\\n\\n\\tsitter \\\"github.com/smacker/go-tree-sitter\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/api\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search/result\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\n// NodeId is a nominal type for the ID of a tree-sitter node.\\ntype NodeId string\\n\\n// walk walks every node in the tree-sitter tree, calling f(node) on each node.\\nfunc walk(node *sitter.Node, f func(node *sitter.Node)) {\\n\\twalkFilter(node, func(n *sitter.Node) bool { f(n); return true })\\n}\\n\\n// walkFilter walks every node in the tree-sitter tree, calling f(node) on each node and descending into\\n// children if it returns true.\\nfunc walkFilter(node *sitter.Node, f func(node *sitter.Node) bool) {\\n\\tif f(node) {\\n\\t\\tfor i := range int(node.ChildCount()) {\\n\\t\\t\\twalkFilter(node.Child(i), f)\\n\\t\\t}\\n\\t}\\n}\\n\",\"provider\":\"openctx\",\"size\":252,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/lang_starlark.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/lang_starlark.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-33\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"path/filepath\\\"\\n\\t\\\"strings\\\"\\n\\n\\tsitter \\\"github.com/smacker/go-tree-sitter\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\nfunc (s *SquirrelService) getDefStarlark(ctx context.Context, node Node) (ret *Node, err error) {\\n\\tdefer s.onCall(node, String(node.Type()), lazyNodeStringer(&ret))()\\n\\tswitch node.Type() {\\n\\tcase \\\"identifier\\\":\\n\\t\\treturn starlarkBindingNamed(node.Node.Content(node.Contents), swapNode(node, getRoot(node.Node))), nil\\n\\tcase \\\"string\\\":\\n\\t\\treturn s.getDefStarlarkString(ctx, node)\\n\\tdefault:\\n\\t\\treturn nil, nil\\n\\n\\t}\\n}\\n\\nfunc (s *SquirrelService) getDefStarlarkString(ctx context.Context, node Node) (ret *Node, err error) {\\n\\tsitterQuery, err := sitter.NewQuery([]byte(loadQuery), node.LangSpec.language)\\n\\tif err != nil {\\n\\t\\treturn nil, errors.Newf(\\\"failed to parse query: %s\\\\n%s\\\", err, loadQuery)\\n\\t}\\n\\tdefer sitterQuery.Close()\\n\\tcursor := sitter.NewQueryCursor()\\n\",\"provider\":\"openctx\",\"size\":251,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/service.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/service.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-36\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"os\\\"\\n\\t\\\"runtime\\\"\\n\\t\\\"strconv\\\"\\n\\t\\\"strings\\\"\\n\\n\\t\\\"github.com/fatih/color\\\"\\n\\tsitter \\\"github.com/smacker/go-tree-sitter\\\"\\n\\n\\tsymbolsTypes \\\"github.com/sourcegraph/sourcegraph/cmd/symbols/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\n// How to read a file.\\ntype readFileFunc func(context.Context, types.RepoCommitPath) ([]byte, error)\\n\\n// SquirrelService uses tree-sitter and the symbols service to analyze and traverse files to find\\n// symbols.\\ntype SquirrelService struct {\\n\\treadFile            readFileFunc\\n\\tsymbolSearch        symbolsTypes.SearchFunc\\n\\tbreadcrumbs         Breadcrumbs\\n\\tparser              *sitter.Parser\\n\\tclosables           []func()\\n\\terrorOnParseFailure bool\\n\\tdepth               int\\n}\\n\\n// New creates a new SquirrelService.\\nfunc New(readFile readFileFunc, symbolSearch symbolsTypes.SearchFunc) *SquirrelService {\\n\\treturn &SquirrelService{\\n\",\"provider\":\"openctx\",\"size\":215,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/service_test.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/service_test.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-43\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"os\\\"\\n\\t\\\"path/filepath\\\"\\n\\t\\\"slices\\\"\\n\\t\\\"sort\\\"\\n\\t\\\"testing\\\"\\n\\n\\t\\\"github.com/fatih/color\\\"\\n\\t\\\"github.com/google/go-cmp/cmp\\\"\\n\\t\\\"github.com/grafana/regexp\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search/result\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n)\\n\\nfunc init() {\\n\\tif _, ok := os.LookupEnv(\\\"NO_COLOR\\\"); !ok {\\n\\t\\tcolor.NoColor = false\\n\\t}\\n}\\n\\nfunc TestNonLocalDefinition(t *testing.T) {\\n\\trepoDirs, err := os.ReadDir(\\\"test_repos\\\")\\n\\tfatalIfErrorLabel(t, err, \\\"reading test_repos\\\")\\n\\n\\tannotations := []annotation{}\\n\\n\\treadFile := func(ctx context.Context, path types.RepoCommitPath) ([]byte, error) {\\n\\t\\treturn os.ReadFile(filepath.Join(\\\"test_repos\\\", path.Repo, path.Path))\\n\\t}\\n\\n\\ttempSquirrel := New(readFile, nil)\\n\\tallSymbols := []result.Symbol{}\\n\\n\\tfor _, repoDir := range repoDirs {\\n\\t\\tif !repoDir.IsDir() {\\n\\t\\t\\tt.Fatalf(\\\"unexpected file %s\\\", repoDir.Name())\\n\\t\\t}\\n\\n\",\"provider\":\"openctx\",\"size\":251,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/hover_test.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/hover_test.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-60\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"strings\\\"\\n\\t\\\"testing\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\nfunc TestHover(t *testing.T) {\\n\\tjava := `\\nclass C {\\n\\tvoid m() {\\n\\t\\t// not a comment line\\n\\n\\t\\t// comment line 1\\n\\t\\t// comment line 2\\n\\t\\tint x = 5;\\n\\t}\\n}\\n`\\n\\n\\tgolang := `\\nfunc main() {\\n\\t// not a comment line\\n\\n\\t// comment line 1\\n\\t// comment line 2\\n\\tvar x int\\n}\\n`\\n\\n\\tcsharp := `\\nnamespace Foo {\\n    class Bar {\\n        static void Baz(int p) {\\n\\t\\t\\t// not a comment line\\n\\n\\t\\t\\t// comment line 1\\n\\t\\t\\t// comment line 2\\n\\t\\t\\tvar x = 5;\\n\\t\\t}\\n\\t}\\n}\\n`\\n\\n\\ttests := []struct {\\n\\t\\tpath     string\\n\\t\\tcontents string\\n\\t\\twant     string\\n\\t}{\\n\\t\\t{\\\"test.java\\\", java, \\\"comment line 1\\\\ncomment line 2\\\\n\\\"},\\n\\t\\t{\\\"test.go\\\", golang, \\\"comment line 1\\\\ncomment line 2\\\\n\\\"},\\n\\t\\t{\\\"test.cs\\\", csharp, \\\"comment line 1\\\\ncomment line 2\\\\n\\\"},\\n\\t}\\n\\n\\treadFile := func(ctx context.Context, path types.RepoCommitPath) ([]byte, error) {\\n\\t\\tfor _, test := range tests {\\n\",\"provider\":\"openctx\",\"size\":296,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/BUILD.bazel\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/BUILD.bazel\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-31\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"load(\\\"//dev:go_defs.bzl\\\", \\\"go_test\\\")\\nload(\\\"@io_bazel_rules_go//go:def.bzl\\\", \\\"go_library\\\")\\n\\ngo_library(\\n    name = \\\"squirrel\\\",\\n    srcs = [\\n        \\\"breadcrumbs.go\\\",\\n        \\\"hover.go\\\",\\n        \\\"lang_java.go\\\",\\n        \\\"lang_python.go\\\",\\n        \\\"lang_starlark.go\\\",\\n        \\\"languages.go\\\",\\n        \\\"local_code_intel.go\\\",\\n        \\\"service.go\\\",\\n        \\\"util.go\\\",\\n    ],\\n    embedsrcs = [\\\"language-file-extensions.json\\\"],\\n    importpath = \\\"github.com/sourcegraph/sourcegraph/cmd/symbols/squirrel\\\",\\n    tags = [TAG_PLATFORM_SEARCH],\\n    visibility = [\\\"//visibility:public\\\"],\\n    deps = [\\n        \\\"//cmd/symbols/types\\\",\\n        \\\"//internal/api\\\",\\n        \\\"//internal/jsonc\\\",\\n        \\\"//internal/search\\\",\\n        \\\"//internal/search/result\\\",\\n        \\\"//internal/types\\\",\\n        \\\"//lib/errors\\\",\\n        \\\"@com_github_fatih_color//:color\\\",\\n        \\\"@com_github_grafana_regexp//:regexp\\\",\\n        \\\"@com_github_smacker_go_tree_sitter//:go-tree-sitter\\\",\\n\",\"provider\":\"openctx\",\"size\":231,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"internal/symbols/client.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/symbols/client.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L2-27\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package symbols\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"io\\\"\\n\\n\\t\\\"github.com/sourcegraph/log\\\"\\n\\t\\\"go.opentelemetry.io/otel/attribute\\\"\\n\\t\\\"google.golang.org/grpc/codes\\\"\\n\\t\\\"google.golang.org/grpc/status\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/actor\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/api\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/authz\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/conf/conftypes\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/endpoint\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/grpc/defaults\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/limiter\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search/result\\\"\\n\\tproto \\\"github.com/sourcegraph/sourcegraph/internal/symbols/v1\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/trace\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\nfunc defaultEndpoints() *endpoint.Map {\\n\",\"provider\":\"openctx\",\"size\":204,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/internal/api/handler_cgo.go\",\"uri\":{\"${'$'}\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/internal/api/handler_cgo.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L13-37\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"\\t\\\"github.com/sourcegraph/sourcegraph/internal/grpc/chunk\\\"\\n\\tproto \\\"github.com/sourcegraph/sourcegraph/internal/symbols/v1\\\"\\n\\tinternaltypes \\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\nfunc convertSquirrelErrorToGrpcError(err error) *status.Status {\\n\\tif errors.Is(err, squirrel.UnrecognizedFileExtensionError) {\\n\\t\\treturn status.New(codes.InvalidArgument, err.Error())\\n\\t}\\n\\tif errors.Is(err, squirrel.UnsupportedLanguageError) {\\n\\t\\treturn status.New(codes.Unimplemented, err.Error())\\n\\t}\\n\\treturn nil\\n}\\n\\n// LocalCodeIntel returns local code intelligence for the given file and commit\\nfunc (s *grpcService) LocalCodeIntel(request *proto.LocalCodeIntelRequest, ss proto.SymbolsService_LocalCodeIntelServer) error {\\n\\tsquirrelService := squirrel.New(s.readFileFunc, nil)\\n\\tdefer squirrelService.Close()\\n\\n\\targs := request.GetRepoCommitPath().ToInternal()\\n\\n\\tctx := ss.Context()\\n\\tpayload, err := squirrelService.LocalCodeIntel(ctx, args)\\n\\tif err != nil {\\n\",\"provider\":\"openctx\",\"size\":218,\"isTooLarge\":false}]},{\"model\":\"openai/gpt-4o\",\"text\":\"In the `github.com/sourcegraph/sourcegraph` repository, Squirrel is a service used for analyzing and traversing files to find symbols. It leverages the tree-sitter library, which is a parser generator tool and an incremental parsing library. Squirrel is designed to provide local code intelligence, such as symbol definitions, references, and hover information.\\n\\nHere are some key points about Squirrel based on the provided codebase context:\\n\\n1. **Purpose**: Squirrel is used to analyze source code files to extract symbols and provide code intelligence features like definitions, references, and hover information.\\n\\n2. **Implementation**: Squirrel uses tree-sitter to parse source code files. Tree-sitter is a powerful parsing library that can generate parsers for different programming languages. Squirrel uses these parsers to build syntax trees and analyze code.\\n\\n3. **Components**:\\n   - **SquirrelService**: The main service that provides methods for analyzing files and extracting symbols.\\n   - **readFileFunc**: A function type that defines how to read files.\\n   - **Breadcrumbs**: Used for debugging and logging the traversal of syntax trees.\\n   - **PartialSymbol**: Represents a symbol with its name, hover information, definition range, and references.\\n   - **Scope**: A mapping from symbol names to symbols.\\n\\n4. **Usage**: Squirrel is used in the `LocalCodeIntel` method to provide local code intelligence for a given file and commit. It parses the file, collects symbols, and returns the relevant information.\\n\\n5. **Error Handling**: Squirrel has specific error handling for unrecognized file extensions and unsupported languages, converting these errors to gRPC errors.\\n\\nHere is a brief overview of how Squirrel is used in the `LocalCodeIntel` method:\\n\\n```go\\nfunc (s *grpcService) LocalCodeIntel(request *proto.LocalCodeIntelRequest, ss proto.SymbolsService_LocalCodeIntelServer) error {\\n    squirrelService := squirrel.New(s.readFileFunc, nil)\\n    defer squirrelService.Close()\\n\\n    args := request.GetRepoCommitPath().ToInternal()\\n\\n    ctx := ss.Context()\\n    payload, err := squirrelService.LocalCodeIntel(ctx, args)\\n    if err != nil {\\n        return convertSquirrelErrorToGrpcError(err)\\n    }\\n\\n    // Process and return the payload\\n}\\n```\\n\\nIn this method, a new SquirrelService is created, and the `LocalCodeIntel` method is called to analyze the file and extract symbols. The results are then processed and returned to the client.\\n\\nOverall, Squirrel is a crucial component in Sourcegraph's code intelligence infrastructure, providing detailed code analysis and symbol information to enhance the developer experience.\",\"speaker\":\"assistant\"}],\"isMessageInProgress\":false,\"chatID\":\"Thu, 30 May 2024 09:39:23 GMT\"}",
        "{\"type\":\"enhanced-context\",\"enhancedContextStatus\":{\"groups\":[{\"displayName\":\"github.com/sourcegraph/cody\",\"providers\":[{\"kind\":\"search\",\"type\":\"remote\",\"state\":\"ready\",\"id\":\"UmVwb3NpdG9yeToy\",\"inclusion\":\"manual\",\"isIgnored\":false}]}]}}",
        "{\"type\":\"setConfigFeatures\",\"configFeatures\":{\"chat\":true,\"attribution\":true}}",
        "{\"type\":\"clientState\",\"value\":{\"initialContext\":[{\"type\":\"repository\",\"uri\":{\"${'$'}mid\":1,\"path\":\"github.com/sourcegraph/cody\",\"scheme\":\"repo\"},\"isIgnored\":false,\"title\":\"Repository\",\"repoName\":\"github.com/sourcegraph/cody\",\"repoID\":\"UmVwb3NpdG9yeToy\",\"provider\":\"openctx\",\"content\":null,\"description\":\"github.com/sourcegraph/cody\",\"source\":\"initial\",\"icon\":\"folder\"},{\"type\":\"file\",\"uri\":{\"${'$'}mid\":1,\"fsPath\":\"/Users/dpc/projects/cody/lib/shared/src/cody-ignore/context-filters-provider.ts\",\"external\":\"file:///Users/dpc/projects/cody/lib/shared/src/cody-ignore/context-filters-provider.ts\",\"path\":\"/Users/dpc/projects/cody/lib/shared/src/cody-ignore/context-filters-provider.ts\",\"scheme\":\"file\"},\"content\":\"\",\"source\":\"initial\",\"size\":0,\"title\":\"Current File\",\"description\":\"context-filters-provider.ts\",\"icon\":\"file\"}]}}",
        "{\"type\":\"enhanced-context\",\"enhancedContextStatus\":{\"groups\":[{\"displayName\":\"github.com/sourcegraph/cody\",\"providers\":[{\"kind\":\"search\",\"type\":\"remote\",\"state\":\"ready\",\"id\":\"UmVwb3NpdG9yeToy\",\"inclusion\":\"manual\",\"isIgnored\":false}]}]}}",
        "{\"type\":\"chatModels\",\"models\":[{\"default\":true,\"codyProOnly\":false,\"provider\":\"OpenAI\",\"title\":\"gpt 4o\",\"deprecated\":false,\"model\":\"openai/gpt-4o\",\"usage\":[\"chat\",\"edit\"],\"contextWindow\":{\"input\":15000,\"output\":4000,\"context\":{\"user\":30000}}},{\"default\":false,\"codyProOnly\":false,\"provider\":\"Ollama\",\"title\":\"llama3:latest\",\"deprecated\":false,\"model\":\"ollama/llama3:latest\",\"usage\":[\"chat\",\"edit\"],\"contextWindow\":{\"input\":2048,\"output\":4000},\"uiGroup\":\"Ollama (Local)\"},{\"default\":false,\"codyProOnly\":false,\"provider\":\"Ollama\",\"title\":\"codegemma:instruct\",\"deprecated\":false,\"model\":\"ollama/codegemma:instruct\",\"usage\":[\"chat\",\"edit\"],\"contextWindow\":{\"input\":2048,\"output\":4000},\"uiGroup\":\"Ollama (Local)\"},{\"default\":false,\"codyProOnly\":false,\"provider\":\"Ollama\",\"title\":\"codegemma:7b instruct\",\"deprecated\":false,\"model\":\"ollama/codegemma:7b-instruct\",\"usage\":[\"chat\",\"edit\"],\"contextWindow\":{\"input\":2048,\"output\":4000},\"uiGroup\":\"Ollama (Local)\"},{\"default\":false,\"codyProOnly\":false,\"provider\":\"Ollama\",\"title\":\"codegemma:2b\",\"deprecated\":false,\"model\":\"ollama/codegemma:2b\",\"usage\":[\"chat\",\"edit\"],\"contextWindow\":{\"input\":2048,\"output\":4000},\"uiGroup\":\"Ollama (Local)\"},{\"default\":false,\"codyProOnly\":false,\"provider\":\"Ollama\",\"title\":\"codegemma:latest\",\"deprecated\":false,\"model\":\"ollama/codegemma:latest\",\"usage\":[\"chat\",\"edit\"],\"contextWindow\":{\"input\":2048,\"output\":4000},\"uiGroup\":\"Ollama (Local)\"}]}",
        "{\"type\":\"config\",\"config\":{\"uiKindIsWeb\":false,\"serverEndpoint\":\"https://sg02.sourcegraphcloud.com/\",\"experimentalNoodle\":false},\"authStatus\":{\"endpoint\":\"https://sg02.sourcegraphcloud.com/\",\"isDotCom\":false,\"isLoggedIn\":true,\"showInvalidAccessTokenError\":false,\"authenticated\":true,\"hasVerifiedEmail\":false,\"requiresVerifiedEmail\":false,\"siteHasCodyEnabled\":true,\"siteVersion\":\"277711_2024-06-08_5.4-d288874197be\",\"userCanUpgrade\":false,\"username\":\"dominic.cooney-wrwdu\",\"primaryEmail\":\"dominic.cooney@sourcegraph.com\",\"displayName\":\"\",\"avatarURL\":\"http://localhost:3123/profile.png\",\"codyApiVersion\":1,\"configOverwrites\":{\"chatModel\":\"openai/gpt-4o\",\"chatModelMaxTokens\":16000,\"fastChatModel\":\"anthropic/claude-3-haiku-20240307\",\"fastChatModelMaxTokens\":12000,\"completionModel\":\"anthropic/claude-3-haiku-20240307\",\"completionModelMaxTokens\":12000,\"provider\":\"sourcegraph\",\"smartContextWindow\":true}},\"workspaceFolderUris\":[\"file:///Users/dpc/projects/jtest\",\"file:///Users/dpc/projects/cody\"]}",
        // webview->extension {"command":"get-chat-models"}
        "{\"type\":\"history\",\"localHistory\":{\"chat\":{\"Thu, 16 May 2024 07:57:51 GMT\":{\"id\":\"Thu, 16 May 2024 07:57:51 GMT\",\"chatModel\":\"anthropic/claude-3-sonnet-20240229\",\"lastInteractionTimestamp\":\"Thu, 16 May 2024 07:57:51 GMT\",\"interactions\":[]},\"Wed, 22 May 2024 00:10:29 GMT\":{\"id\":\"Wed, 22 May 2024 00:10:29 GMT\",\"lastInteractionTimestamp\":\"Wed, 22 May 2024 00:10:29 GMT\",\"interactions\":[{\"humanMessage\":{\"text\":\"hey cody what's up\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"hey cody what's up\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span style=\\\"white-space: pre-wrap;\\\">hey cody what's up</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"text\":\"Hello there! As an AI coding assistant from Sourcegraph, I'm doing well and ready to help you with any coding-related questions or tasks you may have. How can I assist you today?\",\"speaker\":\"assistant\",\"model\":\"anthropic/claude-3-sonnet-20240229\"}},{\"humanMessage\":{\"text\":\"hey cody what's up? @github.com/sourcegraph/cody I want to chat about stuff\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"hey cody what's up? \",\"type\":\"text\",\"version\":1},{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/cody\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/cody\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/cody\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/cody\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToy\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" I want to chat about stuff\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span style=\\\"white-space: pre-wrap;\\\">hey cody what's up? </span><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/cody&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/cody&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/cody&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToy&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fcody%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/cody</a></span><span style=\\\"white-space: pre-wrap;\\\"> I want to chat about stuff</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"anthropic/claude-3-sonnet-20240229\",\"text\":\"\",\"speaker\":\"assistant\",\"error\":{\"isChatErrorGuard\":\"isChatErrorGuard\",\"message\":\"Sourcegraph Cody Gateway: unexpected status code 400: {\\n  \\\"error\\\": {\\n    \\\"message\\\": \\\"Invalid value: ''. Supported values are: 'system', 'assistant', 'user', 'function', and 'tool'.\\\",\\n    \\\"type\\\": \\\"invalid_request_error\\\",\\n    \\\"param\\\": \\\"messages[0].role\\\",\\n    \\\"code\\\": \\\"invalid_value\\\"\\n  }\\n}\",\"name\":\"Error\"}}}],\"chatModel\":\"anthropic/claude-3-sonnet-20240229\"},\"Tue, 28 May 2024 13:48:21 GMT\":{\"id\":\"Tue, 28 May 2024 13:48:21 GMT\",\"lastInteractionTimestamp\":\"Tue, 28 May 2024 13:48:21 GMT\",\"interactions\":[{\"humanMessage\":{\"text\":\"how does local embeddings controller work?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"how does local embeddings controller work?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span style=\\\"white-space: pre-wrap;\\\">how does local embeddings controller work?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[{\"type\":\"file\",\"content\":\"and forth between the two.\\n\\n### Config\\n\\nFirst, add a config element to SourcegraphSpec in spec.go (or modify an existing\\none). Consider \\\"how unique\\\" this service is, and whether it could benefit from\\nembedding StandardConfig. Take a look at this struct, and the corresponding\\nStandardComponent interface, in the `config` subpackage.\\n\\nBy embedding StandardConfig, you'll get various features for almost-free:\\n\\n- The ability to disable the service, which allows the use of\\n  `reconcileObject()`. This frees the developer from writing any upsert/delete\\n  logic at all, usually.\\n- Container resources\\n- Node selectors, tolerations, and affinities.\\n- Image pull secrets for use with private image registries.\\n- Service account annotations\\n  - This is an extremely common customization need, e.g. to enable GKE\\n    workload-identity bindings.\\n- Adding standard prometheus scrape directive annotations to Services (k8s\\n  v1.Service - there's that term overloading again).\\n\\n\",\"range\":[{\"line\":23,\"character\":0},{\"line\":45,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/appliance/development.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L24-45\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"internal/appliance/development.md\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"  - [How to find monitoring](find_monitoring.md)\\n  - [How to add monitoring](add_monitoring.md)\\n  - [How to enable continuous profiling in production](profiling_continuous.md)\\n- [GraphQL](../background-information/graphql_api.md)\\n  - [How to add a GraphQL query](../how-to/add_graphql_query.md)\\n\\n## Local Environment\\n\\n- [Set up local development with Zoekt and Sourcegraph](zoekt_local_dev.md)\\n- [How to debug live code](debug_live_code.md)\\n- [Ignoring editor config files in Git](ignoring_editor_config_files.md)\\n- [How to inspect the database from IntelliJ](inspect_postgres_from_intellij.md)\\n\\n## Testing Sourcegraph & CI\\n\\n- [How to run tests](testing.md)\\n   - See also [Testing Principles](../background-information/testing_principles.md) and [Continuous Integration](../background-information/ci/index.md)\\n- [Configure a test instance of Phabricator and Gitolite](configure_phabricator_gitolite.md)\\n- [How to test changes in dogfood](testing_in_dogfood.md)\\n\",\"range\":[{\"line\":20,\"character\":0},{\"line\":38,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/doc/dev/how-to/index.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L21-38\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"doc/dev/how-to/index.md\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"```\\n\\nThe assets get generated to `src/main/resources/dist`, which are ignored by\\ngit. The JetBrains plugin embeds the contents of that directory into the\\nplugin.\\n\\n## Previewing the assets locally\\n\\nRun the following commands to preview the components in a standalone HTML file.\\n\\n```sh\\npnpm standalone && open http://localhost:3000/\\n```\\n\",\"range\":[{\"line\":16,\"character\":0},{\"line\":28,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/client/jetbrains/README.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L17-28\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"client/jetbrains/README.md\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"# How to set up Cody Gateway locally\\n\\n> WARNING: This is a development guide - to use Cody Gateway for Sourcegraph, refer to [Sourcegraph Cody Gateway](https://sourcegraph.com/docs/cody/core-concepts/cody-gateway).\\n\\nThis guide documents how to set up [Cody Gateway](https://handbook.sourcegraph.com/departments/engineering/teams/cody/cody-gateway/) locally for development.\\n\\nTo get started, Cody Gateway is included in the standard `dotcom` run set.\\nSince Cody Gateway cucrently depends on Sourcegraph.com, there's not much point running any other run set.\\n\\n```sh\\nsg start dotcom\\n```\\n\\n*However*, the locally running Cody Gateway is not used by default - `dev-private` credentials point towards a [shared development instance of Cody Gateway](https://handbook.sourcegraph.com/departments/engineering/teams/cody/cody-gateway/).\\nTo use the locally running Cody Gateway, follow the steps in [use a locally running Cody Gateway](#use-a-locally-running-cody-gateway)\\n\\n## Use a locally running Cody Gateway\\n\",\"range\":[{\"line\":0,\"character\":0},{\"line\":17,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/doc/dev/how-to/cody_gateway.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-17\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"doc/dev/how-to/cody_gateway.md\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"# Developing the EmbeddedWebApp\\n\\n- To test your local changes on 3rd party sites, you will have to proxy your dev environment using [ngrok](https://ngrok.com/)\\n- Run ngrok using this command: `./ngrok http 3080 --host-header=rewrite`\\n- Copy the Forwarding https:// address and use it to replace the `externalURL` property in your `site-config.json`\\n  - If you copy the http:// address, then embedding will fail for non-Cloud local instances\\n- Start (or restart) your local dev environment\\n- Navigate to a 3rd party site (e.g., codepen.io), create a new page, and embed an iframe using the ngrok URL\\n\",\"range\":[{\"line\":0,\"character\":0},{\"line\":8,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/client/web/src/enterprise/embed/README.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-8\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"client/web/src/enterprise/embed/README.md\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"-- Makes reading/setting values from the table error so that we can\\n-- control exactly what can be registered to the recognizer config.\\nlocal config_mt = {\\n  __index = function(_, key)\\n    error(\\\"unknown key for recognizers: \\\" .. tostring(key))\\n  end,\\n\\n  __newindex = function(_, key, _)\\n    error(\\\"unable to set values on recognizer config: \\\" .. tostring(key))\\n  end,\\n}\\n\\nlocal M = {}\\n\\nM.is_config = function(tbl)\\n  return type(tbl) == \\\"table\\\" and getmetatable(tbl) == config_mt\\nend\\n\\nM.new = function(config)\\n  assert(type(config) == \\\"table\\\", \\\"config must be a table, got: \\\" .. tostring(config))\\n\\n  for key, v in pairs(config) do\\n    if string.sub(key, 1, 3) == \\\"sg.\\\" then\\n      if v ~= false then\\n        error \\\"Only allowed to set `sg.` prefixed recognizers to false\\\"\\n      end\\n    end\\n  end\\n\\n  config.__type = \\\"sg.recognizer\\\"\\n  return setmetatable(config, config_mt)\\nend\\n\\n\",\"range\":[{\"line\":0,\"character\":0},{\"line\":33,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/codeintel/autoindexing/internal/inference/lua/config.lua\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-33\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"internal/codeintel/autoindexing/internal/inference/lua/config.lua\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"# Documentation for how to override sg configuration for local development:\\n# https://github.com/sourcegraph/sourcegraph/blob/main/doc/dev/background-information/sg/index.md#configuration\\nenv:\\n  PGPORT: 5432\\n  PGHOST: localhost\\n  PGUSER: sourcegraph\\n  PGPASSWORD: sourcegraph\\n  PGDATABASE: sourcegraph\\n  PGSSLMODE: disable\\n  SG_DEV_MIGRATE_ON_APPLICATION_STARTUP: 'true'\\n  INSECURE_DEV: true\\n\\n  SRC_REPOS_DIR: ${'$'}HOME/.sourcegraph/repos\\n  SRC_LOG_LEVEL: info\\n  SRC_LOG_FORMAT: condensed\\n  SRC_TRACE_LOG: false\\n  # Set this to true to show an iTerm link to the file:line where the log message came from\\n  SRC_LOG_SOURCE_LINK: false\\n\\n  # Use two gitserver instances in local dev\\n  SRC_GIT_SERVER_1: 127.0.0.1:3501\\n  SRC_GIT_SERVER_2: 127.0.0.1:3502\\n  SRC_GIT_SERVERS: 127.0.0.1:3501 127.0.0.1:3502\\n\\n  # Enable sharded indexed search mode:\\n  INDEXED_SEARCH_SERVERS: localhost:3070 localhost:3071\\n\\n  GO111MODULE: 'on'\\n\\n  DEPLOY_TYPE: dev\\n\\n  SRC_HTTP_ADDR: ':3082'\\n\\n\",\"range\":[{\"line\":0,\"character\":0},{\"line\":33,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/sg.config.yaml\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-33\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"sg.config.yaml\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"//\\n// # Testing the error page\\n//\\n// Testing out the layout/styling of the error page that is used to handle\\n// internal server errors, 404s, etc. is very easy by visiting:\\n//\\n//\\thttp://localhost:3080/__errorTest?nodebug=true&error=theerror&status=500\\n//\\n// The parameters are as follows:\\n//\\n//\\tnodebug=true -- hides error messages (which is ALWAYS the case in production)\\n//\\terror=theerror -- controls the error message text\\n//\\tstatus=500 -- controls the status code\\npackage ui\\n\",\"range\":[{\"line\":7,\"character\":0},{\"line\":20,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/frontend/internal/app/ui/doc.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L8-20\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"cmd/frontend/internal/app/ui/doc.go\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"version: 1\\ninteractions:\\n- request:\\n    body: \\\"\\\"\\n    form: {}\\n    headers:\\n      Cache-Control:\\n      - max-age=0\\n      Content-Type:\\n      - application/json; charset=utf-8\\n    url: https://gitlab.com/api/v4/projects/16606088/merge_requests/1/notes?page=1\\n    method: GET\\n  response:\\n    body: '[]'\\n    headers:\\n      Cache-Control:\\n      - max-age=0, private, must-revalidate\\n      Cf-Cache-Status:\\n      - DYNAMIC\\n      Cf-Ray:\\n      - 793ebf23dd94c4f5-SEA\\n      Content-Length:\\n      - \\\"2\\\"\\n      Content-Security-Policy:\\n      - default-src 'none'\\n      Content-Type:\\n      - application/json\\n      Date:\\n      - Fri, 03 Feb 2023 22:54:08 GMT\\n      Etag:\\n      - W/\\\"4f53cda18c2baa0c0354bb5f9a3ecbe5\\\"\\n      Gitlab-Lb:\\n      - fe-33-lb-gprd\\n      Gitlab-Sv:\\n      - localhost\\n      Link:\\n      - <https://gitlab.com/api/v4/projects/16606088/merge_requests/1/notes?activity_filter=all_notes&id=16606088&noteable_id=1&order_by=created_at&page=1&per_page=20&sort=desc>;\\n\",\"range\":[{\"line\":2,\"character\":0},{\"line\":38,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/batches/sources/testdata/sources/TestDecorateMergeRequestData/not_a_fork.yaml\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L3-38\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"internal/batches/sources/testdata/sources/TestDecorateMergeRequestData/not_a_fork.yaml\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\")\\n\\n// MockRepoEmbeddingJobsStore is a mock implementation of the\\n// RepoEmbeddingJobsStore interface (from the package\\n// github.com/sourcegraph/sourcegraph/internal/embeddings/background/repo)\\n// used for unit testing.\\ntype MockRepoEmbeddingJobsStore struct {\\n\\t// CancelRepoEmbeddingJobFunc is an instance of a mock function object\\n\\t// controlling the behavior of the method CancelRepoEmbeddingJob.\\n\\tCancelRepoEmbeddingJobFunc *RepoEmbeddingJobsStoreCancelRepoEmbeddingJobFunc\\n\\t// CountRepoEmbeddingJobsFunc is an instance of a mock function object\\n\\t// controlling the behavior of the method CountRepoEmbeddingJobs.\\n\\tCountRepoEmbeddingJobsFunc *RepoEmbeddingJobsStoreCountRepoEmbeddingJobsFunc\\n\\t// CountRepoEmbeddingsFunc is an instance of a mock function object\\n\\t// controlling the behavior of the method CountRepoEmbeddings.\\n\\tCountRepoEmbeddingsFunc *RepoEmbeddingJobsStoreCountRepoEmbeddingsFunc\\n\\t// CreateRepoEmbeddingJobFunc is an instance of a mock function object\\n\",\"range\":[{\"line\":16,\"character\":0},{\"line\":32,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/embeddings/background/repo/mocks_temp.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L17-32\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"internal/embeddings/background/repo/mocks_temp.go\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"export { useElementObscuredArea } from './useElementObscuredArea'\\nexport { useEventObservable, useObservable, useObservableWithStatus } from './useObservable'\\nexport { useInterval } from './useInterval'\\nexport { useIsMounted } from './useIsMounted'\\nexport { useIsTruncated } from './useIsTruncated'\\nexport { useKeyboard } from './useKeyboard'\\nexport { useLocalStorage } from './useLocalStorage'\\nexport { useSessionStorage } from './useSessionStorage'\\nexport { useMatchMedia, useReducedMotion } from './useMatchMedia'\\nexport { useMeasure } from './useMeasure'\\nexport { useOffsetPagination } from './useOffsetPagination'\\nexport { useOnClickOutside } from './useOnClickOutside'\\nexport { useSearchParameters } from './useSearchParameters'\\nexport { useStopwatch } from './useStopwatch'\\nexport { useTimeoutManager } from './useTimeoutManager'\\nexport { WildcardThemeContext, useWildcardTheme } from './useWildcardTheme'\\nexport type { WildcardTheme } from './useWildcardTheme'\\nexport { useWindowSize } from './useWindowSize'\\n\",\"range\":[{\"line\":6,\"character\":0},{\"line\":23,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/client/wildcard/src/hooks/index.ts\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L7-23\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"client/wildcard/src/hooks/index.ts\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"ExecutionFinished.args = {\\n    state: BatchSpecState.COMPLETED,\\n}\\n\\nExecutionFinished.storyName = 'after execution finishes'\\n\\nexport const LocallyExecutedSpec: StoryFn = () => (\\n    <WebStory>\\n        {props => (\\n            <BatchSpecContextProvider\\n                batchChange={mockBatchChange()}\\n                batchSpec={mockFullBatchSpec({ source: BatchSpecSource.LOCAL })}\\n            >\\n                <ReadOnlyBatchSpecForm {...props} telemetryRecorder={noOpTelemetryRecorder} />\\n            </BatchSpecContextProvider>\\n        )}\\n    </WebStory>\\n)\\n\\nLocallyExecutedSpec.storyName = 'for a locally-executed spec'\\n\",\"range\":[{\"line\":79,\"character\":0},{\"line\":98,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/client/web/src/enterprise/batches/batch-spec/execute/ReadOnlyBatchSpecForm.story.tsx\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L80-98\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"client/web/src/enterprise/batches/batch-spec/execute/ReadOnlyBatchSpecForm.story.tsx\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"}\\n\\n// In the hermetic bazel environment, we skip setup-envtest, handling the assets\\n// directly in a hermetic and cachable way.\\n// If we're using `go test`, which can be convenient for local dev, we fall back\\n// on expecting setup-envtest to be present on the developer machine.\\nfunc (suite *ApplianceTestSuite) kubebuilderAssetPathLocalDev() string {\\n\\tsetupEnvTestCmd := exec.Command(\\\"setup-envtest\\\", \\\"use\\\", \\\"1.28.0\\\", \\\"--bin-dir\\\", \\\"/tmp/envtest\\\", \\\"-p\\\", \\\"path\\\")\\n\\tvar envtestOut bytes.Buffer\\n\\tsetupEnvTestCmd.Stdout = &envtestOut\\n\\terr := setupEnvTestCmd.Run()\\n\\tsuite.Require().NoError(err, \\\"Did you remember to `go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest`?\\\")\\n\\treturn strings.TrimSpace(envtestOut.String())\\n}\\n\\nfunc (suite *ApplianceTestSuite) createConfigMap(fixtureFileName string) string {\\n\\t// Create a random namespace for each test\\n\\tnamespace := \\\"test-appliance-\\\" + suite.randomSlug()\\n\\tns := &corev1.Namespace{\\n\\t\\tObjectMeta: metav1.ObjectMeta{\\n\\t\\t\\tName: namespace,\\n\\t\\t},\\n\\t}\\n\",\"range\":[{\"line\":116,\"character\":0},{\"line\":138,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/appliance/reconciler/helpers_test.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L117-138\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"internal/appliance/reconciler/helpers_test.go\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"    { key: 'configuration', isEnabled: true, handler: { type: 'link' } },\\n    { key: 'spec', isEnabled: true, handler: { type: 'link' } },\\n    { key: 'execution', isEnabled: false },\\n    { key: 'preview', isEnabled: true, handler: { type: 'link' } },\\n]\\n\\nexport const LocallyExecutedSpec: StoryFn = args => (\\n    <WebStory>{props => <TabBar {...props} tabsConfig={LOCAL_TABS} activeTabKey={args.activeTabKey} />}</WebStory>\\n)\\nLocallyExecutedSpec.argTypes = {\\n    activeTabKey: {\\n        control: { type: 'select', options: ['configuration', 'spec', 'preview'] },\\n    },\\n}\\nLocallyExecutedSpec.args = {\\n    activeTabKey: 'preview',\\n}\\n\\nLocallyExecutedSpec.storyName = 'for a locally-executed spec'\\n\",\"range\":[{\"line\":95,\"character\":0},{\"line\":113,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/client/web/src/enterprise/batches/batch-spec/TabBar.story.tsx\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L96-113\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"client/web/src/enterprise/batches/batch-spec/TabBar.story.tsx\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"---\\nsource: crates/syntax-analysis/src/highlighting/syntect_scip.rs\\nexpression: \\\"snapshot_sciptect_documents(&document, &contents)\\\"\\n---\\n  import fs = require(\\\"fs\\\");\\n//^^^^^^ Keyword keyword.control.import.tsx\\n//       ^^ Identifier variable.other.readwrite.alias.tsx\\n//          ^ IdentifierOperator keyword.operator.assignment.tsx\\n//            ^^^^^^^ Keyword keyword.control.require.tsx\\n//                   ^ PunctuationBracket meta.brace.round.tsx\\n//                    ^^^^ StringLiteral string.quoted.double.tsx\\n//                        ^ PunctuationBracket meta.brace.round.tsx\\n//                         ^ PunctuationDelimiter punctuation.terminator.statement.tsx\\n  export class SiteAdminUsageStatisticsPage extends React.Component<\\n//^^^^^^ Keyword keyword.control.export.tsx\\n//       ^^^^^ Keyword storage.type.class.tsx\\n//             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ IdentifierType entity.name.type.class.tsx\\n\",\"range\":[{\"line\":0,\"character\":0},{\"line\":17,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/docker-images/syntax-highlighter/crates/syntax-analysis/src/highlighting/snapshots/syntax_analysis__highlighting__syntect_scip__test__typescript-jsx.tsx.snap\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-17\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"docker-images/syntax-highlighter/crates/syntax-analysis/src/highlighting/snapshots/syntax_analysis__highlighting__syntect_scip__test__typescript-jsx.tsx.snap\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"\\nimport classNames from 'classnames'\\nimport { useMergeRefs } from 'use-callback-ref'\\n\\nimport { useAutoFocus, Input, Form } from '@sourcegraph/wildcard'\\n\\nimport { FilterControl, type FilteredConnectionFilter, type FilteredConnectionFilterValue } from '../FilterControl'\\n\\nimport styles from './ConnectionForm.module.scss'\\n\\nexport interface ConnectionFormProps {\\n    /** Hides the search input field. */\\n    hideSearch?: boolean\\n\\n    /** Shows the search input field before the filter controls */\\n    showSearchFirst?: boolean\\n\\n    /** CSS class name for the <input> element */\\n    inputClassName?: string\\n\\n    /** CSS class name for the <form> element */\\n    formClassName?: string\\n\\n    /** Placeholder text for the <input> element */\\n    inputPlaceholder?: string\\n\\n    /** Value of the <input> element */\\n    inputValue?: string\\n\\n    /** aria-label for the <input> element */\\n    inputAriaLabel?: string\\n\\n    /** Called when the <input> element value changes */\\n    onInputChange?: React.ChangeEventHandler<HTMLInputElement>\\n\",\"range\":[{\"line\":2,\"character\":0},{\"line\":35,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/client/web/src/components/FilteredConnection/ui/ConnectionForm.tsx\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L3-35\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"client/web/src/components/FilteredConnection/ui/ConnectionForm.tsx\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"import type { Configuration } from '../configuration'\\nimport type { EmbeddingsSearch } from '../embeddings'\\nimport type { GraphContextFetcher } from '../graph-context'\\nimport type {\\n    ContextResult,\\n    FilenameContextFetcher,\\n    IndexedKeywordContextFetcher,\\n    KeywordContextFetcher,\\n} from '../local-context'\\nimport {\\n    isMarkdownFile,\\n    populateCodeContextTemplate,\\n    populateMarkdownContextTemplate,\\n    populatePreciseCodeContextTemplate,\\n} from '../prompt/templates'\\nimport type { Message } from '../sourcegraph-api'\\nimport type { EmbeddingsSearchResult } from '../sourcegraph-api/graphql/client'\\nimport type { UnifiedContextFetcher } from '../unified-context'\\nimport { isError } from '../utils'\\n\\nimport {\\n    type ContextFile,\\n    type ContextFileSource,\\n    type ContextMessage,\\n    getContextMessageWithResponse,\\n} from './messages'\\n\\nexport interface ContextSearchOptions {\\n    numCodeResults: number\\n    numTextResults: number\\n}\\n\\nexport class CodebaseContext {\\n    private embeddingResultsError = ''\\n\",\"range\":[{\"line\":0,\"character\":0},{\"line\":34,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/client/cody-shared/src/codebase-context/index.ts\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-34\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"client/cody-shared/src/codebase-context/index.ts\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\treturn out, nil\\n}\\n\\nfunc (c *symbolsServiceClient) LocalCodeIntel(ctx context.Context, in *LocalCodeIntelRequest, opts ...grpc.CallOption) (SymbolsService_LocalCodeIntelClient, error) {\\n\\tstream, err := c.cc.NewStream(ctx, &SymbolsService_ServiceDesc.Streams[0], SymbolsService_LocalCodeIntel_FullMethodName, opts...)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tx := &symbolsServiceLocalCodeIntelClient{stream}\\n\\tif err := x.ClientStream.SendMsg(in); err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tif err := x.ClientStream.CloseSend(); err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\treturn x, nil\\n}\\n\\ntype SymbolsService_LocalCodeIntelClient interface {\\n\\tRecv() (*LocalCodeIntelResponse, error)\\n\\tgrpc.ClientStream\\n}\\n\\ntype symbolsServiceLocalCodeIntelClient struct {\\n\\tgrpc.ClientStream\\n}\\n\\nfunc (x *symbolsServiceLocalCodeIntelClient) Recv() (*LocalCodeIntelResponse, error) {\\n\\tm := new(LocalCodeIntelResponse)\\n\\tif err := x.ClientStream.RecvMsg(m); err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\treturn m, nil\\n}\\n\\n\",\"range\":[{\"line\":49,\"character\":0},{\"line\":86,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/symbols/v1/symbols_grpc.pb.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L50-86\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"internal/symbols/v1/symbols_grpc.pb.go\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"    body: \\\"\\\"\\n    form: {}\\n    headers:\\n      Accept:\\n      - application/vnd.github.jean-grey-preview+json,application/vnd.github.mercy-preview+json\\n      - application/vnd.github.machine-man-preview+json\\n      Cache-Control:\\n      - max-age=0\\n      Content-Type:\\n      - application/json; charset=utf-8\\n    url: https://api.github.com/user/repos?sort=created&visibility=all&page=0&per_page=7\\n    method: GET\\n  response:\\n\",\"range\":[{\"line\":5,\"character\":0},{\"line\":17,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/repos/testdata/sources/GITHUB-SEARCH-REPOS/empty-query-string-exclude-two-positive-match.yaml\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L6-17\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"internal/repos/testdata/sources/GITHUB-SEARCH-REPOS/empty-query-string-exclude-two-positive-match.yaml\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false},{\"type\":\"file\",\"content\":\"    body: \\\"\\\"\\n    form: {}\\n    headers:\\n      Accept:\\n      - application/vnd.github.jean-grey-preview+json,application/vnd.github.mercy-preview+json\\n      - application/vnd.github.machine-man-preview+json\\n      Cache-Control:\\n      - max-age=0\\n      Content-Type:\\n      - application/json; charset=utf-8\\n    url: https://api.github.com/user/repos?sort=created&visibility=all&page=0&per_page=5\\n    method: GET\\n  response:\\n\",\"range\":[{\"line\":5,\"character\":0},{\"line\":17,\"character\":0}],\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/repos/testdata/sources/GITHUB-SEARCH-REPOS/empty-query-string-found.yaml\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L6-17\"},\"source\":\"unified\",\"repoName\":\"github.com/sourcegraph/sourcegraph\",\"title\":\"internal/repos/testdata/sources/GITHUB-SEARCH-REPOS/empty-query-string-found.yaml\",\"revision\":\"4e31a4e38d942e26e8e8a5d520db574d652c73d4\",\"isTooLarge\":false}]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"The local embeddings controller in Sourcegraph is responsible for managing and interacting with embeddings, which are vector representations of code or text used for various purposes like search, recommendations, and more. Based on the codebase context provided, here's a high-level overview of how the local embeddings controller might work:\\n\\n1. **Configuration and Initialization**:\\n   - The embeddings controller is likely initialized with specific configurations, such as database connections, API endpoints, and other necessary settings. This can be inferred from the configuration files and environment variables provided in the `sg.config.yaml`.\\n\\n2. **Embedding Jobs Management**:\\n   - The `MockRepoEmbeddingJobsStore` in `mocks_temp.go` suggests that there is a store or database where embedding jobs are managed. This includes creating, counting, and canceling embedding jobs.\\n   - Methods like `CancelRepoEmbeddingJob`, `CountRepoEmbeddingJobs`, and `CreateRepoEmbeddingJob` are used to interact with the embedding jobs store.\\n\\n3. **API Interaction**:\\n   - The YAML files (`empty-query-string-found.yaml`, `empty-query-string-exclude-two-positive-match.yaml`, `not_a_fork.yaml`) indicate that the embeddings controller interacts with external APIs (e.g., GitHub, GitLab) to fetch data required for generating embeddings.\\n   - These interactions involve making HTTP requests, handling responses, and possibly processing the data received from these APIs.\\n\\n4. **Data Processing**:\\n   - The Lua script (`config.lua`) suggests that there is a configuration mechanism for controlling how embeddings are recognized and processed. This includes validating and setting specific configurations for the embeddings process.\\n   - The script ensures that only allowed configurations are set and provides error handling for unknown or invalid configurations.\\n\\n5. **Error Handling and Debugging**:\\n   - The `doc.go` file provides information on how to test and debug error pages, which might be useful for debugging issues related to embeddings processing.\\n   - Proper error handling mechanisms are likely in place to ensure that any issues during the embeddings process are logged and can be debugged effectively.\\n\\n6. **Local Development and Testing**:\\n   - The `README.md` files and other documentation provide guidelines for setting up and testing the embeddings controller locally. This includes using tools like `ngrok` for proxying local environments and running specific commands to start the development environment.\\n   - The `how-to` guides and other documentation provide detailed steps for setting up, debugging, and testing the embeddings controller in a local development environment.\\n\\n7. **Integration with Sourcegraph**:\\n   - The embeddings controller is integrated with Sourcegraph's broader architecture, interacting with various components like the database, API clients, and other services.\\n   - Environment variables and configurations specific to Sourcegraph (e.g., `SRC_REPOS_DIR`, `SRC_LOG_LEVEL`) are used to ensure that the embeddings controller works seamlessly within the Sourcegraph ecosystem.\\n\\nOverall, the local embeddings controller in Sourcegraph is a complex system that involves configuration, API interaction, data processing, error handling, and integration with Sourcegraph's broader architecture. The provided codebase context gives a glimpse into various aspects of this system, including configuration, testing, and debugging.\",\"speaker\":\"assistant\"}}],\"chatModel\":\"openai/gpt-4o\",\"enhancedContext\":{\"selectedRepos\":[{\"name\":\"github.com/sourcegraph/sourcegraph\",\"id\":\"UmVwb3NpdG9yeToxMA==\"},{\"name\":\"github.com/sourcegraph/cody\",\"id\":\"UmVwb3NpdG9yeToy\"}]}},\"Thu, 30 May 2024 08:11:47 GMT\":{\"id\":\"Thu, 30 May 2024 08:11:47 GMT\",\"lastInteractionTimestamp\":\"Thu, 30 May 2024 08:11:47 GMT\",\"interactions\":[{\"humanMessage\":{\"text\":\"hey cody are you up?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"hey cody are you up?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span style=\\\"white-space: pre-wrap;\\\">hey cody are you up?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"Yes, I'm here! How can I assist you today?\",\"speaker\":\"assistant\"}}],\"chatModel\":\"openai/gpt-4o\"},\"Thu, 30 May 2024 08:13:17 GMT\":{\"id\":\"Thu, 30 May 2024 08:13:17 GMT\",\"lastInteractionTimestamp\":\"Thu, 30 May 2024 08:13:17 GMT\",\"interactions\":[],\"chatModel\":\"openai/gpt-4o\"},\"Thu, 30 May 2024 08:14:46 GMT\":{\"id\":\"Thu, 30 May 2024 08:14:46 GMT\",\"lastInteractionTimestamp\":\"Thu, 30 May 2024 08:14:46 GMT\",\"interactions\":[],\"chatModel\":\"openai/gpt-4o\"},\"Thu, 30 May 2024 08:16:18 GMT\":{\"id\":\"Thu, 30 May 2024 08:16:18 GMT\",\"lastInteractionTimestamp\":\"Thu, 30 May 2024 08:16:18 GMT\",\"interactions\":[{\"humanMessage\":{\"text\":\"hello chat\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"hello chat\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span style=\\\"white-space: pre-wrap;\\\">hello chat</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"Hello! How can I assist you today?\",\"speaker\":\"assistant\"}},{\"humanMessage\":{\"text\":\"hey cody what's up?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"hey cody what's up?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span style=\\\"white-space: pre-wrap;\\\">hey cody what's up?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"Hello! I'm here and ready to help you with any coding questions or issues you might have. What can I assist you with today?\",\"speaker\":\"assistant\"}},{\"humanMessage\":{\"text\":\"@github.com/sourcegraph/cody what does this repository do?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/cody\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/cody\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/cody\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/cody\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToy\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" what does this repository do?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/cody&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/cody&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/cody&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToy&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fcody%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/cody</a></span><span style=\\\"white-space: pre-wrap;\\\"> what does this repository do?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"The repository `@github.com/sourcegraph/cody` is the home of Cody, an AI coding assistant developed by Sourcegraph. Cody is designed to help developers with a variety of tasks, such as:\\n\\n- Answering coding questions\\n- Providing code suggestions and completions\\n- Assisting with debugging and troubleshooting\\n- Offering documentation and code examples\\n- Enhancing productivity by automating repetitive tasks\\n\\nIf you have specific questions about the repository or need help with something related to Cody, feel free to ask!\",\"speaker\":\"assistant\"}}],\"chatModel\":\"openai/gpt-4o\"},\"Thu, 30 May 2024 09:26:13 GMT\":{\"id\":\"Thu, 30 May 2024 09:26:13 GMT\",\"lastInteractionTimestamp\":\"Thu, 30 May 2024 09:26:13 GMT\",\"interactions\":[{\"humanMessage\":{\"text\":\"@github.com/sourcegraph/cody what testing framework does this use for end-to-end tests?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/cody\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/cody\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/cody\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/cody\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToy\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" what testing framework does this use for end-to-end tests?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/cody&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/cody&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/cody&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToy&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fcody%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/cody</a></span><span style=\\\"white-space: pre-wrap;\\\"> what testing framework does this use for end-to-end tests?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"The Sourcegraph Cody project uses Playwright for end-to-end tests. Playwright is a powerful testing framework that allows for automated browser testing and is known for its reliability and comprehensive feature set. If you have any specific questions about setting up or running these tests, feel free to ask!\",\"speaker\":\"assistant\"}}],\"chatModel\":\"openai/gpt-4o\"},\"Thu, 30 May 2024 09:36:33 GMT\":{\"id\":\"Thu, 30 May 2024 09:36:33 GMT\",\"lastInteractionTimestamp\":\"Thu, 30 May 2024 09:36:33 GMT\",\"interactions\":[{\"humanMessage\":{\"text\":\"@github.com/sourcegraph/cloud what does the cloud repository use for integration tests?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/cloud\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/cloud\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/cloud\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/cloud\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToxNQ==\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" what does the cloud repository use for integration tests?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/cloud&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/cloud&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/cloud&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToxNQ==&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fcloud%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/cloud</a></span><span style=\\\"white-space: pre-wrap;\\\"> what does the cloud repository use for integration tests?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"To determine the specific tools and frameworks used for integration tests in the Sourcegraph cloud repository, you would typically look at the repository's configuration files and documentation. Here are some common places to check:\\n\\n1. **README.md or other documentation files**: These files often contain information about the development setup, including testing.\\n\\n2. **CI/CD configuration files**: Files like `.github/workflows/*`, `.gitlab-ci.yml`, `Jenkinsfile`, or similar can provide insights into the CI/CD pipeline and testing setup.\\n\\n3. **Package manager files**: Files like `package.json` (for JavaScript/TypeScript), `go.mod` (for Go), `requirements.txt` or `setup.py` (for Python), etc., can list dependencies related to testing frameworks.\\n\\n4. **Test directories**: Look for directories named `test`, `tests`, `integration-tests`, or similar. The structure and contents of these directories can give you clues about the testing setup.\\n\\n5. **Configuration files**: Files like `jest.config.js`, `pytest.ini`, `karma.conf.js`, etc., can provide specific configurations for test frameworks.\\n\\nIf you have access to the repository, you can clone it and search for keywords like \\\"test\\\", \\\"integration\\\", or specific testing frameworks (e.g., Jest, Cypress, Selenium, etc.).\\n\\nIf you provide more specific details or access to the repository, I can give you a more precise answer.\",\"speaker\":\"assistant\"}}],\"chatModel\":\"openai/gpt-4o\"},\"Thu, 30 May 2024 09:39:23 GMT\":{\"id\":\"Thu, 30 May 2024 09:39:23 GMT\",\"lastInteractionTimestamp\":\"Thu, 30 May 2024 09:39:23 GMT\",\"interactions\":[{\"humanMessage\":{\"text\":\"What does the github.com/sourcegraph/cody repository use for end-to-end tests?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\"What does the github.com/sourcegraph/cody repository use for end-to-end tests?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span style=\\\"white-space: pre-wrap;\\\">What does the github.com/sourcegraph/cody repository use for end-to-end tests?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"The `github.com/sourcegraph/cody` repository uses Cypress for end-to-end tests. Cypress is a popular JavaScript-based end-to-end testing framework that allows developers to write and run tests for web applications. You can find the Cypress tests in the `client/cypress` directory of the repository.\",\"speaker\":\"assistant\"}},{\"humanMessage\":{\"text\":\"@github.com/sourcegraph/cody what does vscode/src/edit/utils/edit-models.ts getOverridenModelForIntent do for dotcom users doing \\\"fix\\\"?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/cody\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/cody\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/cody\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/cody\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToy\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" what does vscode/src/edit/utils/edit-models.ts getOverridenModelForIntent do for dotcom users doing \\\"fix\\\"?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/cody&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/cody&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/cody&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToy&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fcody%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/cody</a></span><span style=\\\"white-space: pre-wrap;\\\"> what does vscode/src/edit/utils/edit-models.ts getOverridenModelForIntent do for dotcom users doing \\\"fix\\\"?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"The `getOverridenModelForIntent` function in the `vscode/src/edit/utils/edit-models.ts` file of the `github.com/sourcegraph/cody` repository is designed to handle specific intents for users, such as the \\\"fix\\\" intent. For Sourcegraph dotcom users, this function provides a way to override the default behavior of the model based on the user's intent.\\n\\nWhen a user on Sourcegraph dotcom uses the \\\"fix\\\" intent, this function can modify or override the model's behavior to better suit the specific needs of the \\\"fix\\\" operation. This might involve adjusting the model's parameters, selecting a different model variant, or applying specific heuristics to improve the accuracy and relevance of the fixes suggested by the model.\\n\\nTo understand the exact implementation and behavior, you would need to look at the source code of the `getOverridenModelForIntent` function in the `edit-models.ts` file. This function likely contains logic to check the user's intent and apply the necessary overrides to the model.\\n\\nHere is a simplified example of what such a function might look like:\\n\\n```typescript\\nexport function getOverridenModelForIntent(intent: string, user: User): Model {\\n    let model = getDefaultModel();\\n\\n    if (user.isDotcomUser) {\\n        switch (intent) {\\n            case 'fix':\\n                model = getFixModelOverride();\\n                break;\\n            // Add other intents as needed\\n        }\\n    }\\n\\n    return model;\\n}\\n```\\n\\nIn this example, `getDefaultModel` would return the default model, and `getFixModelOverride` would return a model specifically tailored for the \\\"fix\\\" intent. The actual implementation in the repository may be more complex and involve additional logic and parameters.\",\"speaker\":\"assistant\"}},{\"humanMessage\":{\"text\":\"@github.com/sourcegraph/cody use for end-to-end tests?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/cody\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/cody\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/cody\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/cody\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToy\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" use for end-to-end tests?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/cody&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/cody&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/cody&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToy&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fcody%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/cody</a></span><span style=\\\"white-space: pre-wrap;\\\"> use for end-to-end tests?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"The `github.com/sourcegraph/cody` repository uses Playwright for end-to-end tests. Playwright is a powerful end-to-end testing framework that supports multiple browsers and provides a rich API for automating web interactions.\\n\\nYou can find the Playwright tests in the `e2e` directory of the repository. This directory contains the test scripts and configurations needed to run the end-to-end tests.\\n\\nTo run the Playwright tests, you typically use commands defined in the project's `package.json` or specific scripts provided in the repository's documentation.\\n\\nFor example, you might find a script like this in `package.json`:\\n\\n```json\\n\\\"scripts\\\": {\\n  \\\"test:e2e\\\": \\\"playwright test\\\"\\n}\\n```\\n\\nRunning `npm run test:e2e` or `yarn test:e2e` would then execute the Playwright tests.\\n\\nFor more detailed information, you should refer to the specific documentation and test files within the `e2e` directory of the `github.com/sourcegraph/cody` repository.\",\"speaker\":\"assistant\"}},{\"humanMessage\":{\"text\":\"@github.com/sourcegraph/sourcegraph What is Squirrel?\",\"editorState\":{\"v\":\"lexical-v0\",\"lexicalEditorState\":{\"root\":{\"children\":[{\"children\":[{\"detail\":1,\"format\":0,\"mode\":\"token\",\"style\":\"\",\"text\":\"@github.com/sourcegraph/sourcegraph\",\"type\":\"contextItemMention\",\"version\":1,\"contextItem\":{\"type\":\"openctx\",\"title\":\"github.com/sourcegraph/sourcegraph\",\"providerUri\":\"internal-remote-repository-search\",\"uri\":\"file:///github.com/sourcegraph/sourcegraph\",\"provider\":\"openctx\",\"mention\":{\"uri\":\"/github.com/sourcegraph/sourcegraph\",\"data\":{\"repoId\":\"UmVwb3NpdG9yeToxMA==\"}},\"source\":\"user\"}},{\"detail\":0,\"format\":0,\"mode\":\"normal\",\"style\":\"\",\"text\":\" What is Squirrel?\",\"type\":\"text\",\"version\":1}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"paragraph\",\"version\":1,\"textFormat\":0}],\"direction\":\"ltr\",\"format\":\"\",\"indent\":0,\"type\":\"root\",\"version\":1}},\"html\":\"<p class=\\\"_theme-paragraph_h8c55_49\\\" dir=\\\"ltr\\\"><span data-lexical-context-item-mention=\\\"{&quot;type&quot;:&quot;openctx&quot;,&quot;title&quot;:&quot;github.com/sourcegraph/sourcegraph&quot;,&quot;providerUri&quot;:&quot;internal-remote-repository-search&quot;,&quot;uri&quot;:&quot;file:///github.com/sourcegraph/sourcegraph&quot;,&quot;provider&quot;:&quot;openctx&quot;,&quot;mention&quot;:{&quot;uri&quot;:&quot;/github.com/sourcegraph/sourcegraph&quot;,&quot;data&quot;:{&quot;repoId&quot;:&quot;UmVwb3NpdG9yeToxMA==&quot;}},&quot;source&quot;:&quot;user&quot;}\\\" class=\\\"context-item-mention-node _context-item-mention-node_lsu6l_1\\\"><a href=\\\"command:_cody.vscode.open?%5B%7B%22%24mid%22%3A1%2C%22path%22%3A%22%2Fgithub.com%2Fsourcegraph%2Fsourcegraph%22%2C%22scheme%22%3A%22file%22%7D%2C%7B%22preserveFocus%22%3Atrue%2C%22background%22%3Afalse%2C%22preview%22%3Atrue%2C%22viewColumn%22%3A-2%7D%5D\\\">@github.com/sourcegraph/sourcegraph</a></span><span style=\\\"white-space: pre-wrap;\\\"> What is Squirrel?</span></p>\"},\"speaker\":\"human\",\"contextFiles\":[{\"type\":\"openctx\",\"title\":\"internal/cmd/tracking-issue/testdata/issue-14166.md\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/cmd/tracking-issue/testdata/issue-14166.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L8-47\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"<!-- BEGIN WORK -->\\n<!-- BEGIN ASSIGNEE:  -->\\n@unassigned\\n\\n\\nCompleted\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166 \\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: daxmc99 -->\\n@daxmc99: __9.00d__\\n\\n\\nCompleted: __9.00d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __9.00d__\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: flying-robot -->\\n@flying-robot: __1.00d__\\n\\n\\nCompleted: __1.00d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __1.00d__\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: ryanslade -->\\n@ryanslade: __1.00d__\\n\\n\\nCompleted: __1.00d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __1.00d__\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: unknwon -->\\n@unknwon: __6.50d__\\n\\n\\nCompleted: __6.50d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __6.50d__\\n<!-- END ASSIGNEE -->\\n<!-- END WORK -->\\r\\n\",\"provider\":\"openctx\",\"size\":355,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"internal/cmd/tracking-issue/testdata/issue-13988.md\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/cmd/tracking-issue/testdata/issue-13988.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L32-60\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"<!-- BEGIN WORK -->\\n<!-- BEGIN ASSIGNEE: asdine -->\\n@asdine: __7.00d__\\n\\n\\nCompleted: __7.00d__\\n- [x] (\uD83C\uDFC1 2020-09-23) https://github.com/sourcegraph/sourcegraph/pull/14094 \\n- [x] (\uD83C\uDFC1 2020-09-30) https://github.com/sourcegraph/sourcegraph/pull/14098 \\n- [x] (\uD83C\uDFC1 2020-11-03) https://github.com/sourcegraph/sourcegraph/issues/14163  __6.50d__\\n- [x] (\uD83C\uDFC1 2023-10-03) https://github.com/sourcegraph/sourcegraph/issues/32618  __0.50d__ \uD83E\uDDF6\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: daxmc99 -->\\n@daxmc99: __1.00d__\\n\\n\\nCompleted: __1.00d__\\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __1.00d__\\n<!-- END ASSIGNEE -->\\n\\n<!-- BEGIN ASSIGNEE: flying-robot -->\\n@flying-robot: __3.00d__\\n\\n\\nCompleted: __3.00d__\\n- [x] (\uD83C\uDFC1 2020-10-05) https://github.com/sourcegraph/sourcegraph/pull/14370 \\n- [x] (\uD83C\uDFC1 2021-02-24) https://github.com/sourcegraph/sourcegraph/issues/14166  __1.00d__\\n- [x] (\uD83C\uDFC1 2022-11-01) https://github.com/sourcegraph/sourcegraph/issues/40102  __2.00d__\\n<!-- END ASSIGNEE -->\\n\\n\",\"provider\":\"openctx\",\"size\":388,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"internal/cmd/search-blitz/queries.txt\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/cmd/search-blitz/queries.txt\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L12-45\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"patterntype:regexp matt senses\\n\\n# regex_three_sameline\\npatterntype:regexp mk tim hike\\n\\n# regex_repo_scope_small\\npatterntype:regexp repo:^github\\\\.com/sgtest/slate\$ getfragment\\n\\n# regex_repo_scope_large\\npatterntype:regexp repo:^github\\\\.com/sgtest/flutter_inappwebview\$ count:800 add\\\\w+\\n\\n# regex_file_scope\\npatterntype:regexp repo:^github\\\\.com/sgtest/kubernetes\$ file:^cluster/gce/gci Installing\\n\\n# literal_small\\npatterntype:literal --exclude-task=test\\n\\n# literal_large\\npatterntype:literal lang:go -file:vendor/ count:1000 cfssl\\n\\n# literal_repo_scope\\npatterntype:literal repo:^github\\\\.com/sgtest/element\$ repeat-click\\n\\n# literal_repo_excluded_scope\\npatterntype:literal -repo:^github\\\\.com/sourcegraph/sourcegraph\$ --exclude-task=test\\n\\n# literal_file_scope\\npatterntype:literal repo:^github\\\\.com/sgtest/cockroach-gen\$ file:^pkg/ccl/importccl/read_import_csv\\\\.go p.record\\n\\n# symbol_small\\ntype:symbol IndexFormatVersion\\n\\n# diff_small\\ntype:diff repo:^github\\\\.com/sourcegraph/sourcegraph\$ author:camden before:\\\"february 1 2021\\\"\\n\\n\",\"provider\":\"openctx\",\"size\":291,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"doc/dev/background-information/grpc_tutorial.md\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/doc/dev/background-information/grpc_tutorial.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L4-11\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"As of Sourcegraph `5.3.X`, [gRPC](https://grpc.io/about/) has supplanted REST as our default mode of communication between our microservices for our internal APIs.\\n\\n<Callout type=\\\"note\\\">An \\\"internal\\\" API is one that's solely used for intra-service communication/RPCs (think `searcher` fetching an archive from `gitserver`). Internal APIs don't include things like the GraphQL API that external people can use (including our web interface).</Callout>\\n\\n## gRPC Tutorial\\n\\nThe [`internal/grpc/example`](https://github.com/sourcegraph/sourcegraph/tree/main/internal/grpc/example) package in the [sourcegraph/sourcegraph monorepo](https://github.com/sourcegraph/sourcegraph) contains a simple, runnable example of a gRPC service and client. It is a good starting point for understanding how to write a gRPC service that covers the following topics:\\n\\n- All the basic Protobuf types (e.g. primitives, enums, messages, one-ofs, etc.)\\n\",\"provider\":\"openctx\",\"size\":206,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"doc/dev/background-information/codeintel/index.md\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/doc/dev/background-information/codeintel/index.md\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-13\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"# Developing code navigation\\n\\nThis guide documents our approach to developing code navigation-related features in our codebase. This includes the code navigation logic included in the Sourcegraph instance as well as the [extensions](https://github.com/sourcegraph/code-intel-extensions) that provide code navigation to the web UI, browser extension, and code host integrations.\\n\\nServices:\\n\\n- [precise-code-intel-worker](https://github.com/sourcegraph/sourcegraph/blob/main/cmd/precise-code-intel-worker/README.md)\\n\\nCode navigation-specific code:\\n\\n- [lib/codeintel](https://github.com/sourcegraph/sourcegraph/tree/main/lib/codeintel)\\n- [dev/codeintel-qa](https://github.com/sourcegraph/sourcegraph/tree/main/dev/codeintel-qa)\\n- [enterprise/internal/codeintel](https://github.com/sourcegraph/sourcegraph/tree/main/enterprise/internal/codeintel)\\n\",\"provider\":\"openctx\",\"size\":175,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"internal/database/migration/stitch/stitch.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/database/migration/stitch/stitch.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-22\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package stitch\\n\\nimport (\\n\\t\\\"strings\\\"\\n\\n\\t\\\"github.com/google/go-cmp/cmp\\\"\\n\\t\\\"github.com/keegancsmith/sqlf\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/database/migration/definition\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/database/migration/shared\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/oobmigration\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\n// StitchDefinitions constructs a migration graph over time, which includes both the stitched unified\\n// migration graph as defined over multiple releases, as well as a mapping fom schema names to their\\n// root and leaf migrations so that we can later determine what portion of the graph corresponds to a\\n// particular release.\\n//\\n// Stitch is an undoing of squashing. We construct the migration graph by layering the definitions of\\n// the migrations as they're defined in each of the given revisions. Migration definitions with the\\n// same identifier will be \\\"merged\\\" by some custom rules/edge-case logic.\\n\",\"provider\":\"openctx\",\"size\":200,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"dev/buildchecker/testdata/TestRepoBranchLocker/lock.yaml\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/dev/buildchecker/testdata/TestRepoBranchLocker/lock.yaml\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L4-16\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"interactions:\\n- request:\\n    body: \\\"\\\"\\n    form: {}\\n    headers:\\n      Accept:\\n      - application/vnd.github.luke-cage-preview+json\\n      User-Agent:\\n      - go-github/v55.0.0\\n      X-Github-Api-Version:\\n      - \\\"2022-11-28\\\"\\n    url: https://api.github.com/repos/sourcegraph/sourcegraph/branches/test-buildsherrif-branch/protection\\n    method: GET\\n  response:\\n\",\"provider\":\"openctx\",\"size\":100,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/frontend/shared/shared.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/frontend/shared/shared.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L8-27\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"os\\\"\\n\\t\\\"strconv\\\"\\n\\n\\t\\\"github.com/sourcegraph/log\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/enterprise\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/auth\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/authz\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/batches\\\"\\n\\tcodeintelinit \\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/codeintel\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/codemonitors\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/codycontext\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/completions\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/compute\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/contentlibrary\\\"\\n\\tinternalcontext \\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/context\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/dotcom\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/embeddings\\\"\\n\",\"provider\":\"openctx\",\"size\":195,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"mockgen.test.yaml\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/mockgen.test.yaml\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-29\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"- filename: internal/authz/providers/gerrit/mocks_test.go\\n  sources:\\n    - path: github.com/sourcegraph/sourcegraph/internal/extsvc/gerrit\\n      interfaces:\\n        - Client\\n      prefix: Gerrit\\n- filename: internal/batches/sources/mocks_test.go\\n  sources:\\n    - path: github.com/sourcegraph/sourcegraph/internal/batches/sources\\n      interfaces:\\n        - ChangesetSource\\n        - ForkableChangesetSource\\n        - SourcerStore\\n    - path: github.com/sourcegraph/sourcegraph/internal/extsvc/bitbucketcloud\\n      interfaces:\\n        - Client\\n      prefix: BitbucketCloud\\n    - path: github.com/sourcegraph/sourcegraph/internal/extsvc/azuredevops\\n      interfaces:\\n        - Client\\n      prefix: AzureDevOps\\n    - path: github.com/sourcegraph/sourcegraph/internal/extsvc/gerrit\\n      interfaces:\\n        - Client\\n      prefix: Gerrit\\n    - path: github.com/sourcegraph/sourcegraph/internal/gitserver\\n      interfaces:\\n        - Client\\n      prefix: Gitserver\\n\",\"provider\":\"openctx\",\"size\":221,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/internal/api/BUILD.bazel\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/internal/api/BUILD.bazel\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L8-34\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"    srcs = [\\n        \\\"handler.go\\\",\\n        \\\"handler_cgo.go\\\",\\n        \\\"handler_nocgo.go\\\",\\n        \\\"search_sqlite.go\\\",\\n    ],\\n    importpath = \\\"github.com/sourcegraph/sourcegraph/cmd/symbols/internal/api\\\",\\n    tags = [TAG_PLATFORM_SEARCH],\\n    visibility = [\\\"//cmd/symbols:__subpackages__\\\"],\\n    deps = [\\n        \\\"//cmd/symbols/internal/api/observability\\\",\\n        \\\"//cmd/symbols/internal/database/store\\\",\\n        \\\"//cmd/symbols/internal/database/writer\\\",\\n        \\\"//cmd/symbols/observability\\\",\\n        \\\"//cmd/symbols/squirrel\\\",\\n        \\\"//cmd/symbols/types\\\",\\n        \\\"//internal/database\\\",\\n        \\\"//internal/grpc\\\",\\n        \\\"//internal/grpc/chunk\\\",\\n        \\\"//internal/grpc/defaults\\\",\\n        \\\"//internal/observation\\\",\\n        \\\"//internal/search\\\",\\n        \\\"//internal/search/result\\\",\\n        \\\"//internal/symbols/v1:symbols\\\",\\n        \\\"//internal/types\\\",\\n        \\\"//lib/errors\\\",\\n        \\\"@com_github_dustin_go_humanize//:go-humanize\\\",\\n        \\\"@com_github_sourcegraph_log//:log\\\",\\n\",\"provider\":\"openctx\",\"size\":218,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/breadcrumbs.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/breadcrumbs.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-40\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"os\\\"\\n\\t\\\"strings\\\"\\n\\n\\t\\\"github.com/fatih/color\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n)\\n\\n// Breadcrumb is an arbitrary annotation on a token in a file. It's used as a way to log where Squirrel\\n// has been traversing through trees and files for debugging.\\ntype Breadcrumb struct {\\n\\ttypes.RepoCommitPathRange\\n\\tlength  int\\n\\tmessage func() string\\n\\tnumber  int\\n\\tdepth   int\\n\\tfile    string\\n\\tline    int\\n}\\n\\n// Breadcrumbs is a slice of Breadcrumb.\\ntype Breadcrumbs []Breadcrumb\\n\\n// Prints breadcrumbs like this:\\n//\\n//\\tv some breadcrumb\\n//\\t  vvv other breadcrumb\\n//\\n// 78 | func f(f Foo) {\\nfunc (bs *Breadcrumbs) pretty(w *strings.Builder, readFile readFileFunc) {\\n\\t// First collect all the breadcrumbs in a map (path -> line -> breadcrumb) for easier printing.\\n\\tpathToLineToBreadcrumbs := map[types.RepoCommitPath]map[int][]Breadcrumb{}\\n\\tfor _, breadcrumb := range *bs {\\n\\t\\tpath := breadcrumb.RepoCommitPath\\n\\n\",\"provider\":\"openctx\",\"size\":235,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/local_code_intel.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/local_code_intel.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-35\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"strings\\\"\\n\\n\\tsitter \\\"github.com/smacker/go-tree-sitter\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n)\\n\\n// SymbolName is a nominal type for symbol names.\\ntype SymbolName string\\n\\n// Scope is a mapping from symbol name to symbol.\\ntype Scope = map[SymbolName]*PartialSymbol // pointer for mutability\\n\\n// PartialSymbol is the same as types.Symbol, but with the refs stored in a map to deduplicate.\\ntype PartialSymbol struct {\\n\\tName  string\\n\\tHover string\\n\\tDef   types.Range\\n\\t// Store refs as a set to avoid duplicates from some tree-sitter queries.\\n\\tRefs map[types.Range]struct{}\\n}\\n\\n// LocalCodeIntel computes the local code intel payload, which is a list of symbols.\\nfunc (s *SquirrelService) LocalCodeIntel(ctx context.Context, repoCommitPath types.RepoCommitPath) (*types.LocalCodeIntelPayload, error) {\\n\\t// Parse the file.\\n\\troot, err := s.parse(ctx, repoCommitPath)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\n\\t// Collect scopes\\n\",\"provider\":\"openctx\",\"size\":233,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/util.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/util.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-36\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"path/filepath\\\"\\n\\t\\\"runtime\\\"\\n\\t\\\"strings\\\"\\n\\t\\\"testing\\\"\\n\\n\\tsitter \\\"github.com/smacker/go-tree-sitter\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/api\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search/result\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\n// NodeId is a nominal type for the ID of a tree-sitter node.\\ntype NodeId string\\n\\n// walk walks every node in the tree-sitter tree, calling f(node) on each node.\\nfunc walk(node *sitter.Node, f func(node *sitter.Node)) {\\n\\twalkFilter(node, func(n *sitter.Node) bool { f(n); return true })\\n}\\n\\n// walkFilter walks every node in the tree-sitter tree, calling f(node) on each node and descending into\\n// children if it returns true.\\nfunc walkFilter(node *sitter.Node, f func(node *sitter.Node) bool) {\\n\\tif f(node) {\\n\\t\\tfor i := range int(node.ChildCount()) {\\n\\t\\t\\twalkFilter(node.Child(i), f)\\n\\t\\t}\\n\\t}\\n}\\n\",\"provider\":\"openctx\",\"size\":252,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/lang_starlark.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/lang_starlark.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-33\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"path/filepath\\\"\\n\\t\\\"strings\\\"\\n\\n\\tsitter \\\"github.com/smacker/go-tree-sitter\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\nfunc (s *SquirrelService) getDefStarlark(ctx context.Context, node Node) (ret *Node, err error) {\\n\\tdefer s.onCall(node, String(node.Type()), lazyNodeStringer(&ret))()\\n\\tswitch node.Type() {\\n\\tcase \\\"identifier\\\":\\n\\t\\treturn starlarkBindingNamed(node.Node.Content(node.Contents), swapNode(node, getRoot(node.Node))), nil\\n\\tcase \\\"string\\\":\\n\\t\\treturn s.getDefStarlarkString(ctx, node)\\n\\tdefault:\\n\\t\\treturn nil, nil\\n\\n\\t}\\n}\\n\\nfunc (s *SquirrelService) getDefStarlarkString(ctx context.Context, node Node) (ret *Node, err error) {\\n\\tsitterQuery, err := sitter.NewQuery([]byte(loadQuery), node.LangSpec.language)\\n\\tif err != nil {\\n\\t\\treturn nil, errors.Newf(\\\"failed to parse query: %s\\\\n%s\\\", err, loadQuery)\\n\\t}\\n\\tdefer sitterQuery.Close()\\n\\tcursor := sitter.NewQueryCursor()\\n\",\"provider\":\"openctx\",\"size\":251,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/service.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/service.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-36\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"os\\\"\\n\\t\\\"runtime\\\"\\n\\t\\\"strconv\\\"\\n\\t\\\"strings\\\"\\n\\n\\t\\\"github.com/fatih/color\\\"\\n\\tsitter \\\"github.com/smacker/go-tree-sitter\\\"\\n\\n\\tsymbolsTypes \\\"github.com/sourcegraph/sourcegraph/cmd/symbols/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\n// How to read a file.\\ntype readFileFunc func(context.Context, types.RepoCommitPath) ([]byte, error)\\n\\n// SquirrelService uses tree-sitter and the symbols service to analyze and traverse files to find\\n// symbols.\\ntype SquirrelService struct {\\n\\treadFile            readFileFunc\\n\\tsymbolSearch        symbolsTypes.SearchFunc\\n\\tbreadcrumbs         Breadcrumbs\\n\\tparser              *sitter.Parser\\n\\tclosables           []func()\\n\\terrorOnParseFailure bool\\n\\tdepth               int\\n}\\n\\n// New creates a new SquirrelService.\\nfunc New(readFile readFileFunc, symbolSearch symbolsTypes.SearchFunc) *SquirrelService {\\n\\treturn &SquirrelService{\\n\",\"provider\":\"openctx\",\"size\":215,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/service_test.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/service_test.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-43\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"os\\\"\\n\\t\\\"path/filepath\\\"\\n\\t\\\"slices\\\"\\n\\t\\\"sort\\\"\\n\\t\\\"testing\\\"\\n\\n\\t\\\"github.com/fatih/color\\\"\\n\\t\\\"github.com/google/go-cmp/cmp\\\"\\n\\t\\\"github.com/grafana/regexp\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search/result\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n)\\n\\nfunc init() {\\n\\tif _, ok := os.LookupEnv(\\\"NO_COLOR\\\"); !ok {\\n\\t\\tcolor.NoColor = false\\n\\t}\\n}\\n\\nfunc TestNonLocalDefinition(t *testing.T) {\\n\\trepoDirs, err := os.ReadDir(\\\"test_repos\\\")\\n\\tfatalIfErrorLabel(t, err, \\\"reading test_repos\\\")\\n\\n\\tannotations := []annotation{}\\n\\n\\treadFile := func(ctx context.Context, path types.RepoCommitPath) ([]byte, error) {\\n\\t\\treturn os.ReadFile(filepath.Join(\\\"test_repos\\\", path.Repo, path.Path))\\n\\t}\\n\\n\\ttempSquirrel := New(readFile, nil)\\n\\tallSymbols := []result.Symbol{}\\n\\n\\tfor _, repoDir := range repoDirs {\\n\\t\\tif !repoDir.IsDir() {\\n\\t\\t\\tt.Fatalf(\\\"unexpected file %s\\\", repoDir.Name())\\n\\t\\t}\\n\\n\",\"provider\":\"openctx\",\"size\":251,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/hover_test.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/hover_test.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-60\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package squirrel\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"strings\\\"\\n\\t\\\"testing\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\nfunc TestHover(t *testing.T) {\\n\\tjava := `\\nclass C {\\n\\tvoid m() {\\n\\t\\t// not a comment line\\n\\n\\t\\t// comment line 1\\n\\t\\t// comment line 2\\n\\t\\tint x = 5;\\n\\t}\\n}\\n`\\n\\n\\tgolang := `\\nfunc main() {\\n\\t// not a comment line\\n\\n\\t// comment line 1\\n\\t// comment line 2\\n\\tvar x int\\n}\\n`\\n\\n\\tcsharp := `\\nnamespace Foo {\\n    class Bar {\\n        static void Baz(int p) {\\n\\t\\t\\t// not a comment line\\n\\n\\t\\t\\t// comment line 1\\n\\t\\t\\t// comment line 2\\n\\t\\t\\tvar x = 5;\\n\\t\\t}\\n\\t}\\n}\\n`\\n\\n\\ttests := []struct {\\n\\t\\tpath     string\\n\\t\\tcontents string\\n\\t\\twant     string\\n\\t}{\\n\\t\\t{\\\"test.java\\\", java, \\\"comment line 1\\\\ncomment line 2\\\\n\\\"},\\n\\t\\t{\\\"test.go\\\", golang, \\\"comment line 1\\\\ncomment line 2\\\\n\\\"},\\n\\t\\t{\\\"test.cs\\\", csharp, \\\"comment line 1\\\\ncomment line 2\\\\n\\\"},\\n\\t}\\n\\n\\treadFile := func(ctx context.Context, path types.RepoCommitPath) ([]byte, error) {\\n\\t\\tfor _, test := range tests {\\n\",\"provider\":\"openctx\",\"size\":296,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/squirrel/BUILD.bazel\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/squirrel/BUILD.bazel\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L1-31\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"load(\\\"//dev:go_defs.bzl\\\", \\\"go_test\\\")\\nload(\\\"@io_bazel_rules_go//go:def.bzl\\\", \\\"go_library\\\")\\n\\ngo_library(\\n    name = \\\"squirrel\\\",\\n    srcs = [\\n        \\\"breadcrumbs.go\\\",\\n        \\\"hover.go\\\",\\n        \\\"lang_java.go\\\",\\n        \\\"lang_python.go\\\",\\n        \\\"lang_starlark.go\\\",\\n        \\\"languages.go\\\",\\n        \\\"local_code_intel.go\\\",\\n        \\\"service.go\\\",\\n        \\\"util.go\\\",\\n    ],\\n    embedsrcs = [\\\"language-file-extensions.json\\\"],\\n    importpath = \\\"github.com/sourcegraph/sourcegraph/cmd/symbols/squirrel\\\",\\n    tags = [TAG_PLATFORM_SEARCH],\\n    visibility = [\\\"//visibility:public\\\"],\\n    deps = [\\n        \\\"//cmd/symbols/types\\\",\\n        \\\"//internal/api\\\",\\n        \\\"//internal/jsonc\\\",\\n        \\\"//internal/search\\\",\\n        \\\"//internal/search/result\\\",\\n        \\\"//internal/types\\\",\\n        \\\"//lib/errors\\\",\\n        \\\"@com_github_fatih_color//:color\\\",\\n        \\\"@com_github_grafana_regexp//:regexp\\\",\\n        \\\"@com_github_smacker_go_tree_sitter//:go-tree-sitter\\\",\\n\",\"provider\":\"openctx\",\"size\":231,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"internal/symbols/client.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/internal/symbols/client.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L2-27\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"package symbols\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"io\\\"\\n\\n\\t\\\"github.com/sourcegraph/log\\\"\\n\\t\\\"go.opentelemetry.io/otel/attribute\\\"\\n\\t\\\"google.golang.org/grpc/codes\\\"\\n\\t\\\"google.golang.org/grpc/status\\\"\\n\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/actor\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/api\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/authz\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/conf/conftypes\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/endpoint\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/grpc/defaults\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/limiter\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/search/result\\\"\\n\\tproto \\\"github.com/sourcegraph/sourcegraph/internal/symbols/v1\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/trace\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\nfunc defaultEndpoints() *endpoint.Map {\\n\",\"provider\":\"openctx\",\"size\":204,\"isTooLarge\":false},{\"type\":\"openctx\",\"title\":\"cmd/symbols/internal/api/handler_cgo.go\",\"uri\":{\"${'$'}mid\":1,\"path\":\"/github.com/sourcegraph/sourcegraph/-/blob/cmd/symbols/internal/api/handler_cgo.go\",\"scheme\":\"https\",\"authority\":\"sg02.sourcegraphcloud.com\",\"query\":\"L13-37\"},\"providerUri\":\"internal-remote-repository-search\",\"content\":\"\\t\\\"github.com/sourcegraph/sourcegraph/internal/grpc/chunk\\\"\\n\\tproto \\\"github.com/sourcegraph/sourcegraph/internal/symbols/v1\\\"\\n\\tinternaltypes \\\"github.com/sourcegraph/sourcegraph/internal/types\\\"\\n\\t\\\"github.com/sourcegraph/sourcegraph/lib/errors\\\"\\n)\\n\\nfunc convertSquirrelErrorToGrpcError(err error) *status.Status {\\n\\tif errors.Is(err, squirrel.UnrecognizedFileExtensionError) {\\n\\t\\treturn status.New(codes.InvalidArgument, err.Error())\\n\\t}\\n\\tif errors.Is(err, squirrel.UnsupportedLanguageError) {\\n\\t\\treturn status.New(codes.Unimplemented, err.Error())\\n\\t}\\n\\treturn nil\\n}\\n\\n// LocalCodeIntel returns local code intelligence for the given file and commit\\nfunc (s *grpcService) LocalCodeIntel(request *proto.LocalCodeIntelRequest, ss proto.SymbolsService_LocalCodeIntelServer) error {\\n\\tsquirrelService := squirrel.New(s.readFileFunc, nil)\\n\\tdefer squirrelService.Close()\\n\\n\\targs := request.GetRepoCommitPath().ToInternal()\\n\\n\\tctx := ss.Context()\\n\\tpayload, err := squirrelService.LocalCodeIntel(ctx, args)\\n\\tif err != nil {\\n\",\"provider\":\"openctx\",\"size\":218,\"isTooLarge\":false}]},\"assistantMessage\":{\"model\":\"openai/gpt-4o\",\"text\":\"In the `github.com/sourcegraph/sourcegraph` repository, Squirrel is a service used for analyzing and traversing files to find symbols. It leverages the tree-sitter library, which is a parser generator tool and an incremental parsing library. Squirrel is designed to provide local code intelligence, such as symbol definitions, references, and hover information.\\n\\nHere are some key points about Squirrel based on the provided codebase context:\\n\\n1. **Purpose**: Squirrel is used to analyze source code files to extract symbols and provide code intelligence features like definitions, references, and hover information.\\n\\n2. **Implementation**: Squirrel uses tree-sitter to parse source code files. Tree-sitter is a powerful parsing library that can generate parsers for different programming languages. Squirrel uses these parsers to build syntax trees and analyze code.\\n\\n3. **Components**:\\n   - **SquirrelService**: The main service that provides methods for analyzing files and extracting symbols.\\n   - **readFileFunc**: A function type that defines how to read files.\\n   - **Breadcrumbs**: Used for debugging and logging the traversal of syntax trees.\\n   - **PartialSymbol**: Represents a symbol with its name, hover information, definition range, and references.\\n   - **Scope**: A mapping from symbol names to symbols.\\n\\n4. **Usage**: Squirrel is used in the `LocalCodeIntel` method to provide local code intelligence for a given file and commit. It parses the file, collects symbols, and returns the relevant information.\\n\\n5. **Error Handling**: Squirrel has specific error handling for unrecognized file extensions and unsupported languages, converting these errors to gRPC errors.\\n\\nHere is a brief overview of how Squirrel is used in the `LocalCodeIntel` method:\\n\\n```go\\nfunc (s *grpcService) LocalCodeIntel(request *proto.LocalCodeIntelRequest, ss proto.SymbolsService_LocalCodeIntelServer) error {\\n    squirrelService := squirrel.New(s.readFileFunc, nil)\\n    defer squirrelService.Close()\\n\\n    args := request.GetRepoCommitPath().ToInternal()\\n\\n    ctx := ss.Context()\\n    payload, err := squirrelService.LocalCodeIntel(ctx, args)\\n    if err != nil {\\n        return convertSquirrelErrorToGrpcError(err)\\n    }\\n\\n    // Process and return the payload\\n}\\n```\\n\\nIn this method, a new SquirrelService is created, and the `LocalCodeIntel` method is called to analyze the file and extract symbols. The results are then processed and returned to the client.\\n\\nOverall, Squirrel is a crucial component in Sourcegraph's code intelligence infrastructure, providing detailed code analysis and symbol information to enhance the developer experience.\",\"speaker\":\"assistant\"}}],\"chatModel\":\"openai/gpt-4o\"}}}}",
        "{\"type\":\"allMentionProvidersMetadata\",\"providers\":[{\"id\":\"file\",\"title\":\"Files\",\"queryLabel\":\"Search for a file to include...\",\"emptyLabel\":\"No files found\"},{\"id\":\"symbol\",\"title\":\"Symbols\",\"queryLabel\":\"Search for a symbol to include...\",\"emptyLabel\":\"No symbols found\"},{\"id\":\"internal-remote-repository-search\",\"title\":\"Remote Repositories\",\"queryLabel\":\"Remote Repositories\",\"emptyLabel\":\"No results found\"},{\"id\":\"internal-web-provider\",\"title\":\"Web URLs\",\"queryLabel\":\"Web URLs\",\"emptyLabel\":\"No results found\"}]}")

// TODO: Move these into the html[data-id=JetBrains] rules.
// #_defaultStyles
val VSCODE_INJECTED_DEFAULT_STYLES =
    """
			html {
				scrollbar-color: var(--vscode-scrollbarSlider-background) var(--vscode-editor-background);
			}

			body {
				overscroll-behavior-x: none;
				background-color: transparent;
				color: var(--vscode-editor-foreground);
				font-family: var(--vscode-font-family);
				font-weight: var(--vscode-font-weight);
				font-size: var(--vscode-font-size);
				margin: 0;
				padding: 0 20px;
			}

			img, video {
				max-width: 100%;
				max-height: 100%;
			}

			a, a code {
				color: var(--vscode-textLink-foreground);
			}

			a:hover {
				color: var(--vscode-textLink-activeForeground);
			}

			a:focus,
			input:focus,
			select:focus,
			textarea:focus {
				outline: 1px solid -webkit-focus-ring-color;
				outline-offset: -1px;
			}

			code {
				font-family: var(--monaco-monospace-font);
				color: var(--vscode-textPreformat-foreground);
				background-color: var(--vscode-textPreformat-background);
				padding: 1px 3px;
				border-radius: 4px;
			}

			pre code {
				padding: 0;
			}

			blockquote {
				background: var(--vscode-textBlockQuote-background);
				border-color: var(--vscode-textBlockQuote-border);
			}

			kbd {
				background-color: var(--vscode-keybindingLabel-background);
				color: var(--vscode-keybindingLabel-foreground);
				border-style: solid;
				border-width: 1px;
				border-radius: 3px;
				border-color: var(--vscode-keybindingLabel-border);
				border-bottom-color: var(--vscode-keybindingLabel-bottomBorder);
				box-shadow: inset 0 -1px 0 var(--vscode-widget-shadow);
				vertical-align: middle;
				padding: 1px 3px;
			}

			::-webkit-scrollbar {
				width: 10px;
				height: 10px;
			}

			::-webkit-scrollbar-corner {
				background-color: var(--vscode-editor-background);
			}

			::-webkit-scrollbar-thumb {
				background-color: var(--vscode-scrollbarSlider-background);
			}
			::-webkit-scrollbar-thumb:hover {
				background-color: var(--vscode-scrollbarSlider-hoverBackground);
			}
			::-webkit-scrollbar-thumb:active {
				background-color: var(--vscode-scrollbarSlider-activeBackground);
			}
			::highlight(find-highlight) {
				background-color: var(--vscode-editor-findMatchHighlightBackground);
			}
			::highlight(current-find-highlight) {
				background-color: var(--vscode-editor-findMatchBackground);
			}
"""
        .trimIndent()
